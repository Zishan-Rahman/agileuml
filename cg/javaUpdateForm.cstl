/* Update form of expressions, used in execute expr; */


BasicExpression::
_1 |-->_1`typename._1<when> _1 enumerationLiteral

_1.allInstances |-->_1._1_allInstances

_1.insertAt(_2,_3) |-->Ocl.insertAt(_1`cgJava8,_2`cgJava8,_3`cgJava8)
_1.insertInto(_2,_3) |-->Ocl.insertInto(_1`cgJava8,_2`cgJava8,_3`cgJava8)
_1.excludingSubrange(_2,_3) |-->Ocl.excludingSubrange(_1`cgJava8,_2`cgJava8,_3`cgJava8)
_1.setSubrange(_2,_3,_4) |-->Ocl.setSubrange(_1`cgJava8,_2`cgJava8,_3`cgJava8,_4`cgJava8)

_1.setAt(_2,_3) |-->Ocl.setAt(_1`cgJava8,_2`cgJava8,_3`cgJava8)
_1.replace(_2,_3) |-->Ocl.replace(_1`cgJava8,_2`cgJava8,_3`cgJava8)
_1.replaceAll(_2,_3) |-->Ocl.replaceAll(_1`cgJava8,_2`cgJava8,_3`cgJava8)
_1.replaceAllMatches(_2,_3) |-->Ocl.replaceAll(_1`cgJava8,_2`cgJava8,_3`cgJava8)
_1.replaceFirstMatch(_2,_3) |-->Ocl.replaceFirstMatch(_1`cgJava8,_2`cgJava8,_3`cgJava8)

_1 |-->_1
_1._2(_3) |-->_1._2(_3`cgJava8)
_1(_2) |-->_1(_2`cgJava8)
_1._2 |-->_1._2


UnaryExpression::
_1->display() |-->System.out.println(_1`cgJava8 + "")
_1->isDeleted() |-->_1`cgJava8 = null




BinaryExpression::
_1 & _2 |-->_1;\n    _2 
_1 or _2 |-->if (!(_1`cgJava8)) { _2 } 
_1 xor _2 |-->if (!(_1`cgJava8) && !(_2`cgJava8)) { _1 } 

_1 = _2 |-->_1 = _2`cgJava8
_1 : _2 |-->_2.add(_1`cgJava8)
_1 /: _2 |-->_2.remove(_1`cgJava8)
_1 <: _2 |-->_2.addAll(_1`cgJava8)
_1 /<: _2 |-->_2.removeAll(_1`cgJava8)

_1->forAll(_2 | _3) |-->for (_1 _2 : _1._1_allInstances) { _3; }<when>_1 classId
_1->forAll(_2 | _3) |-->for (_2`type _2 : _1`cgJava8) { _3; }

_1->iterate(_2; _3 = _4 | _5) |-->Ocl.iterate(_1`cgJava8, _4`cgJava8, (_2)->((_3)->{return _5`cgJava8;}))

_1->exists(_2 | _3) |-->_1 _2 = _1.create_1();\n    _3<when> _1 classId
_1->exists(_2 | _3) |-->_2`type _2 = Ocl.any(_1`cgJava8, (_2)->{ return _3`cgJava8; })


SetExpression::
Set{} |-->(new HashSet())
Set{_1} |-->Ocl.initialiseSet(_1`cgJava8) 
SortedSet{} |-->(new TreeSet())
SortedSet{_1} |-->Ocl.initialiseSortedSet(_1`cgJava8) 
Sequence{} |-->(new ArrayList())
Sequence{_1} |-->Ocl.initialiseSequence(_1`cgJava8)
SortedSequence{} |-->new SortedSequence(new ArrayList())
SortedSequence{_1} |-->SortedSequence.initialiseSortedSequence(_1`cgJava8) 
Map{} |-->(new HashMap())
Map{_1} |-->Ocl.initialiseMap(_1`cgJava8)

Ref(_1){_2} |-->(new _1[_2`cgJava8])
Ref{_1} |-->(new Object[_1`cgJava8])


ConditionalExpression::
if _1 then _2 else _3 endif |-->((_1`cgJava8) ? _2 : _3)

 

