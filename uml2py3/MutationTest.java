package uml2py3;

import java.util.Vector;
import java.util.List;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.io.*;

public class MutationTest
{ private static File summaryFile = new File("summary.txt");
  private static PrintWriter summaryOut;


  static
  { try {
      summaryOut = new PrintWriter(new BufferedWriter(new FileWriter(summaryFile)));
  } catch (Exception err) { err.printStackTrace(); }
}

    protected void finalize()
    { if (summaryOut != null)
     { try { summaryOut.close(); }
        catch (Exception _ex) { } 
      } 
    } 

  public static void isPrimitiveType_mutation_tests_0(PrimitiveType _self, int[] _counts, int[] _totals)
  {
        String s = "";

    try {
  boolean isPrimitiveType_result = _self.isPrimitiveType(s);
    System.out.println("Test 0 of isPrimitiveType on " + _self + " result = " + isPrimitiveType_result);

    } catch (Throwable _e) { }
 }



  public static void isPrimitiveType_mutation_tests_1(PrimitiveType _self, int[] _counts, int[] _totals)
  {
        String s = " abc_XZ ";

    try {
  boolean isPrimitiveType_result = _self.isPrimitiveType(s);
    System.out.println("Test 1 of isPrimitiveType on " + _self + " result = " + isPrimitiveType_result);

    } catch (Throwable _e) { }
 }



  public static void isPrimitiveType_mutation_tests_2(PrimitiveType _self, int[] _counts, int[] _totals)
  {
        String s = "#�$* &~@':";

    try {
  boolean isPrimitiveType_result = _self.isPrimitiveType(s);
    System.out.println("Test 2 of isPrimitiveType on " + _self + " result = " + isPrimitiveType_result);

    } catch (Throwable _e) { }
 }



  public static void isPrimitiveType_mutation_tests(PrimitiveType _self, int[] _counts, int[] _totals)
  {     MutationTest.isPrimitiveType_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isPrimitiveType_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isPrimitiveType_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isPrimitiveType mutants"); }
    }
  }



  public static void isPythonPrimitiveType_mutation_tests_0(PrimitiveType _self, int[] _counts, int[] _totals)
  {
        String s = "";

    try {
  boolean isPythonPrimitiveType_result = _self.isPythonPrimitiveType(s);
    System.out.println("Test 0 of isPythonPrimitiveType on " + _self + " result = " + isPythonPrimitiveType_result);

    } catch (Throwable _e) { }
 }



  public static void isPythonPrimitiveType_mutation_tests_1(PrimitiveType _self, int[] _counts, int[] _totals)
  {
        String s = " abc_XZ ";

    try {
  boolean isPythonPrimitiveType_result = _self.isPythonPrimitiveType(s);
    System.out.println("Test 1 of isPythonPrimitiveType on " + _self + " result = " + isPythonPrimitiveType_result);

    } catch (Throwable _e) { }
 }



  public static void isPythonPrimitiveType_mutation_tests_2(PrimitiveType _self, int[] _counts, int[] _totals)
  {
        String s = "#�$* &~@':";

    try {
  boolean isPythonPrimitiveType_result = _self.isPythonPrimitiveType(s);
    System.out.println("Test 2 of isPythonPrimitiveType on " + _self + " result = " + isPythonPrimitiveType_result);

    } catch (Throwable _e) { }
 }



  public static void isPythonPrimitiveType_mutation_tests(PrimitiveType _self, int[] _counts, int[] _totals)
  {     MutationTest.isPythonPrimitiveType_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isPythonPrimitiveType_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isPythonPrimitiveType_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isPythonPrimitiveType mutants"); }
    }
  }



  public static void isSingleValued_mutation_tests_0(Entity _self, int[] _counts, int[] _totals)
  {
        String d = "";

    try {
  boolean isSingleValued_result = _self.isSingleValued(d);
    System.out.println("Test 0 of isSingleValued on " + _self + " result = " + isSingleValued_result);

    } catch (Throwable _e) { }
 }



  public static void isSingleValued_mutation_tests_1(Entity _self, int[] _counts, int[] _totals)
  {
        String d = " abc_XZ ";

    try {
  boolean isSingleValued_result = _self.isSingleValued(d);
    System.out.println("Test 1 of isSingleValued on " + _self + " result = " + isSingleValued_result);

    } catch (Throwable _e) { }
 }



  public static void isSingleValued_mutation_tests_2(Entity _self, int[] _counts, int[] _totals)
  {
        String d = "#�$* &~@':";

    try {
  boolean isSingleValued_result = _self.isSingleValued(d);
    System.out.println("Test 2 of isSingleValued on " + _self + " result = " + isSingleValued_result);

    } catch (Throwable _e) { }
 }



  public static void isSingleValued_mutation_tests(Entity _self, int[] _counts, int[] _totals)
  {     MutationTest.isSingleValued_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isSingleValued_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isSingleValued_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isSingleValued mutants"); }
    }
  }



  public static void isSetValued_mutation_tests_0(Entity _self, int[] _counts, int[] _totals)
  {
        String d = "";

    try {
  boolean isSetValued_result = _self.isSetValued(d);
    System.out.println("Test 0 of isSetValued on " + _self + " result = " + isSetValued_result);

    } catch (Throwable _e) { }
 }



  public static void isSetValued_mutation_tests_1(Entity _self, int[] _counts, int[] _totals)
  {
        String d = " abc_XZ ";

    try {
  boolean isSetValued_result = _self.isSetValued(d);
    System.out.println("Test 1 of isSetValued on " + _self + " result = " + isSetValued_result);

    } catch (Throwable _e) { }
 }



  public static void isSetValued_mutation_tests_2(Entity _self, int[] _counts, int[] _totals)
  {
        String d = "#�$* &~@':";

    try {
  boolean isSetValued_result = _self.isSetValued(d);
    System.out.println("Test 2 of isSetValued on " + _self + " result = " + isSetValued_result);

    } catch (Throwable _e) { }
 }



  public static void isSetValued_mutation_tests(Entity _self, int[] _counts, int[] _totals)
  {     MutationTest.isSetValued_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isSetValued_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isSetValued_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isSetValued mutants"); }
    }
  }



  public static void isSequenceValued_mutation_tests_0(Entity _self, int[] _counts, int[] _totals)
  {
        String d = "";

    try {
  boolean isSequenceValued_result = _self.isSequenceValued(d);
    System.out.println("Test 0 of isSequenceValued on " + _self + " result = " + isSequenceValued_result);

    } catch (Throwable _e) { }
 }



  public static void isSequenceValued_mutation_tests_1(Entity _self, int[] _counts, int[] _totals)
  {
        String d = " abc_XZ ";

    try {
  boolean isSequenceValued_result = _self.isSequenceValued(d);
    System.out.println("Test 1 of isSequenceValued on " + _self + " result = " + isSequenceValued_result);

    } catch (Throwable _e) { }
 }



  public static void isSequenceValued_mutation_tests_2(Entity _self, int[] _counts, int[] _totals)
  {
        String d = "#�$* &~@':";

    try {
  boolean isSequenceValued_result = _self.isSequenceValued(d);
    System.out.println("Test 2 of isSequenceValued on " + _self + " result = " + isSequenceValued_result);

    } catch (Throwable _e) { }
 }



  public static void isSequenceValued_mutation_tests(Entity _self, int[] _counts, int[] _totals)
  {     MutationTest.isSequenceValued_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isSequenceValued_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isSequenceValued_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isSequenceValued mutants"); }
    }
  }



  public static void createPKOp_mutation_tests_0(Entity _self, int[] _counts, int[] _totals)
  {
        String key = "";

    try {
  String createPKOp_result = _self.createPKOp(key);
    System.out.println("Test 0 of createPKOp on " + _self + " result = " + createPKOp_result);

    } catch (Throwable _e) { }
 }



  public static void createPKOp_mutation_tests_1(Entity _self, int[] _counts, int[] _totals)
  {
        String key = " abc_XZ ";

    try {
  String createPKOp_result = _self.createPKOp(key);
    System.out.println("Test 1 of createPKOp on " + _self + " result = " + createPKOp_result);

    } catch (Throwable _e) { }
 }



  public static void createPKOp_mutation_tests_2(Entity _self, int[] _counts, int[] _totals)
  {
        String key = "#�$* &~@':";

    try {
  String createPKOp_result = _self.createPKOp(key);
    System.out.println("Test 2 of createPKOp on " + _self + " result = " + createPKOp_result);

    } catch (Throwable _e) { }
 }



  public static void createPKOp_mutation_tests(Entity _self, int[] _counts, int[] _totals)
  {     MutationTest.createPKOp_mutation_tests_0(_self,_counts,_totals);

    MutationTest.createPKOp_mutation_tests_1(_self,_counts,_totals);

    MutationTest.createPKOp_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% createPKOp mutants"); }
    }
  }



  public static void instancesOps_mutation_tests_0(Entity _self, int[] _counts, int[] _totals)
  {
        List leafs = new Vector();

    try {
  String instancesOps_result = _self.instancesOps(leafs);
    System.out.println("Test 0 of instancesOps on " + _self + " result = " + instancesOps_result);

    } catch (Throwable _e) { }
 }



  public static void instancesOps_mutation_tests_1(Entity _self, int[] _counts, int[] _totals)
  {
        List leafs = (new SystemTypes.Set()).add((Entity) Controller.inst().entitys.get(0)).getElements();

    try {
  String instancesOps_result = _self.instancesOps(leafs);
    System.out.println("Test 1 of instancesOps on " + _self + " result = " + instancesOps_result);

    } catch (Throwable _e) { }
 }



  public static void instancesOps_mutation_tests(Entity _self, int[] _counts, int[] _totals)
  {     MutationTest.instancesOps_mutation_tests_0(_self,_counts,_totals);

    MutationTest.instancesOps_mutation_tests_1(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% instancesOps mutants"); }
    }
  }



  public static void isComparitor_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "";

    try {
  boolean isComparitor_result = _self.isComparitor(fname);
    System.out.println("Test 0 of isComparitor on " + _self + " result = " + isComparitor_result);

    } catch (Throwable _e) { }
 }



  public static void isComparitor_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = " abc_XZ ";

    try {
  boolean isComparitor_result = _self.isComparitor(fname);
    System.out.println("Test 1 of isComparitor on " + _self + " result = " + isComparitor_result);

    } catch (Throwable _e) { }
 }



  public static void isComparitor_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "#�$* &~@':";

    try {
  boolean isComparitor_result = _self.isComparitor(fname);
    System.out.println("Test 2 of isComparitor on " + _self + " result = " + isComparitor_result);

    } catch (Throwable _e) { }
 }



  public static void isComparitor_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.isComparitor_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isComparitor_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isComparitor_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isComparitor mutants"); }
    }
  }



  public static void isInclusion_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "";

    try {
  boolean isInclusion_result = _self.isInclusion(fname);
    System.out.println("Test 0 of isInclusion on " + _self + " result = " + isInclusion_result);

    } catch (Throwable _e) { }
 }



  public static void isInclusion_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = " abc_XZ ";

    try {
  boolean isInclusion_result = _self.isInclusion(fname);
    System.out.println("Test 1 of isInclusion on " + _self + " result = " + isInclusion_result);

    } catch (Throwable _e) { }
 }



  public static void isInclusion_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "#�$* &~@':";

    try {
  boolean isInclusion_result = _self.isInclusion(fname);
    System.out.println("Test 2 of isInclusion on " + _self + " result = " + isInclusion_result);

    } catch (Throwable _e) { }
 }



  public static void isInclusion_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.isInclusion_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isInclusion_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isInclusion_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isInclusion mutants"); }
    }
  }



  public static void isExclusion_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "";

    try {
  boolean isExclusion_result = _self.isExclusion(fname);
    System.out.println("Test 0 of isExclusion on " + _self + " result = " + isExclusion_result);

    } catch (Throwable _e) { }
 }



  public static void isExclusion_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = " abc_XZ ";

    try {
  boolean isExclusion_result = _self.isExclusion(fname);
    System.out.println("Test 1 of isExclusion on " + _self + " result = " + isExclusion_result);

    } catch (Throwable _e) { }
 }



  public static void isExclusion_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "#�$* &~@':";

    try {
  boolean isExclusion_result = _self.isExclusion(fname);
    System.out.println("Test 2 of isExclusion on " + _self + " result = " + isExclusion_result);

    } catch (Throwable _e) { }
 }



  public static void isExclusion_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.isExclusion_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isExclusion_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isExclusion_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isExclusion mutants"); }
    }
  }



  public static void isBooleanOp_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "";

    try {
  boolean isBooleanOp_result = _self.isBooleanOp(fname);
    System.out.println("Test 0 of isBooleanOp on " + _self + " result = " + isBooleanOp_result);

    } catch (Throwable _e) { }
 }



  public static void isBooleanOp_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = " abc_XZ ";

    try {
  boolean isBooleanOp_result = _self.isBooleanOp(fname);
    System.out.println("Test 1 of isBooleanOp on " + _self + " result = " + isBooleanOp_result);

    } catch (Throwable _e) { }
 }



  public static void isBooleanOp_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "#�$* &~@':";

    try {
  boolean isBooleanOp_result = _self.isBooleanOp(fname);
    System.out.println("Test 2 of isBooleanOp on " + _self + " result = " + isBooleanOp_result);

    } catch (Throwable _e) { }
 }



  public static void isBooleanOp_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.isBooleanOp_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isBooleanOp_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isBooleanOp_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isBooleanOp mutants"); }
    }
  }



  public static void isStringOp_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "";

    try {
  boolean isStringOp_result = _self.isStringOp(fname);
    System.out.println("Test 0 of isStringOp on " + _self + " result = " + isStringOp_result);

    } catch (Throwable _e) { }
 }



  public static void isStringOp_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = " abc_XZ ";

    try {
  boolean isStringOp_result = _self.isStringOp(fname);
    System.out.println("Test 1 of isStringOp on " + _self + " result = " + isStringOp_result);

    } catch (Throwable _e) { }
 }



  public static void isStringOp_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "#�$* &~@':";

    try {
  boolean isStringOp_result = _self.isStringOp(fname);
    System.out.println("Test 2 of isStringOp on " + _self + " result = " + isStringOp_result);

    } catch (Throwable _e) { }
 }



  public static void isStringOp_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.isStringOp_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isStringOp_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isStringOp_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isStringOp mutants"); }
    }
  }



  public static void isCollectionOp_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "";

    try {
  boolean isCollectionOp_result = _self.isCollectionOp(fname);
    System.out.println("Test 0 of isCollectionOp on " + _self + " result = " + isCollectionOp_result);

    } catch (Throwable _e) { }
 }



  public static void isCollectionOp_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = " abc_XZ ";

    try {
  boolean isCollectionOp_result = _self.isCollectionOp(fname);
    System.out.println("Test 1 of isCollectionOp on " + _self + " result = " + isCollectionOp_result);

    } catch (Throwable _e) { }
 }



  public static void isCollectionOp_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "#�$* &~@':";

    try {
  boolean isCollectionOp_result = _self.isCollectionOp(fname);
    System.out.println("Test 2 of isCollectionOp on " + _self + " result = " + isCollectionOp_result);

    } catch (Throwable _e) { }
 }



  public static void isCollectionOp_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.isCollectionOp_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isCollectionOp_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isCollectionOp_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isCollectionOp mutants"); }
    }
  }



  public static void isDistributedIteratorOp_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "";

    try {
  boolean isDistributedIteratorOp_result = _self.isDistributedIteratorOp(fname);
    System.out.println("Test 0 of isDistributedIteratorOp on " + _self + " result = " + isDistributedIteratorOp_result);

    } catch (Throwable _e) { }
 }



  public static void isDistributedIteratorOp_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = " abc_XZ ";

    try {
  boolean isDistributedIteratorOp_result = _self.isDistributedIteratorOp(fname);
    System.out.println("Test 1 of isDistributedIteratorOp on " + _self + " result = " + isDistributedIteratorOp_result);

    } catch (Throwable _e) { }
 }



  public static void isDistributedIteratorOp_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "#�$* &~@':";

    try {
  boolean isDistributedIteratorOp_result = _self.isDistributedIteratorOp(fname);
    System.out.println("Test 2 of isDistributedIteratorOp on " + _self + " result = " + isDistributedIteratorOp_result);

    } catch (Throwable _e) { }
 }



  public static void isDistributedIteratorOp_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.isDistributedIteratorOp_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isDistributedIteratorOp_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isDistributedIteratorOp_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isDistributedIteratorOp mutants"); }
    }
  }



  public static void isIteratorOp_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "";

    try {
  boolean isIteratorOp_result = _self.isIteratorOp(fname);
    System.out.println("Test 0 of isIteratorOp on " + _self + " result = " + isIteratorOp_result);

    } catch (Throwable _e) { }
 }



  public static void isIteratorOp_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = " abc_XZ ";

    try {
  boolean isIteratorOp_result = _self.isIteratorOp(fname);
    System.out.println("Test 1 of isIteratorOp on " + _self + " result = " + isIteratorOp_result);

    } catch (Throwable _e) { }
 }



  public static void isIteratorOp_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "#�$* &~@':";

    try {
  boolean isIteratorOp_result = _self.isIteratorOp(fname);
    System.out.println("Test 2 of isIteratorOp on " + _self + " result = " + isIteratorOp_result);

    } catch (Throwable _e) { }
 }



  public static void isIteratorOp_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.isIteratorOp_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isIteratorOp_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isIteratorOp_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isIteratorOp mutants"); }
    }
  }



  public static void mapDividesExpression_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";

    try {
  String mapDividesExpression_result = _self.mapDividesExpression(ls,rs);
    System.out.println("Test 0 of mapDividesExpression on " + _self + " result = " + mapDividesExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDividesExpression_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapDividesExpression_result = _self.mapDividesExpression(ls,rs);
    System.out.println("Test 1 of mapDividesExpression on " + _self + " result = " + mapDividesExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDividesExpression_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapDividesExpression_result = _self.mapDividesExpression(ls,rs);
    System.out.println("Test 2 of mapDividesExpression on " + _self + " result = " + mapDividesExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDividesExpression_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapDividesExpression_result = _self.mapDividesExpression(ls,rs);
    System.out.println("Test 3 of mapDividesExpression on " + _self + " result = " + mapDividesExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDividesExpression_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapDividesExpression_result = _self.mapDividesExpression(ls,rs);
    System.out.println("Test 4 of mapDividesExpression on " + _self + " result = " + mapDividesExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDividesExpression_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapDividesExpression_result = _self.mapDividesExpression(ls,rs);
    System.out.println("Test 5 of mapDividesExpression on " + _self + " result = " + mapDividesExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDividesExpression_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapDividesExpression_result = _self.mapDividesExpression(ls,rs);
    System.out.println("Test 6 of mapDividesExpression on " + _self + " result = " + mapDividesExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDividesExpression_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapDividesExpression_result = _self.mapDividesExpression(ls,rs);
    System.out.println("Test 7 of mapDividesExpression on " + _self + " result = " + mapDividesExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDividesExpression_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapDividesExpression_result = _self.mapDividesExpression(ls,rs);
    System.out.println("Test 8 of mapDividesExpression on " + _self + " result = " + mapDividesExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDividesExpression_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapDividesExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapDividesExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapDividesExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapDividesExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapDividesExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapDividesExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapDividesExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapDividesExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapDividesExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapDividesExpression mutants"); }
    }
  }



  public static void mapNumericExpression_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";

    try {
  String mapNumericExpression_result = _self.mapNumericExpression(ls,rs);
    System.out.println("Test 0 of mapNumericExpression on " + _self + " result = " + mapNumericExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapNumericExpression_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapNumericExpression_result = _self.mapNumericExpression(ls,rs);
    System.out.println("Test 1 of mapNumericExpression on " + _self + " result = " + mapNumericExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapNumericExpression_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapNumericExpression_result = _self.mapNumericExpression(ls,rs);
    System.out.println("Test 2 of mapNumericExpression on " + _self + " result = " + mapNumericExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapNumericExpression_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapNumericExpression_result = _self.mapNumericExpression(ls,rs);
    System.out.println("Test 3 of mapNumericExpression on " + _self + " result = " + mapNumericExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapNumericExpression_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapNumericExpression_result = _self.mapNumericExpression(ls,rs);
    System.out.println("Test 4 of mapNumericExpression on " + _self + " result = " + mapNumericExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapNumericExpression_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapNumericExpression_result = _self.mapNumericExpression(ls,rs);
    System.out.println("Test 5 of mapNumericExpression on " + _self + " result = " + mapNumericExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapNumericExpression_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapNumericExpression_result = _self.mapNumericExpression(ls,rs);
    System.out.println("Test 6 of mapNumericExpression on " + _self + " result = " + mapNumericExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapNumericExpression_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapNumericExpression_result = _self.mapNumericExpression(ls,rs);
    System.out.println("Test 7 of mapNumericExpression on " + _self + " result = " + mapNumericExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapNumericExpression_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapNumericExpression_result = _self.mapNumericExpression(ls,rs);
    System.out.println("Test 8 of mapNumericExpression on " + _self + " result = " + mapNumericExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapNumericExpression_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapNumericExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapNumericExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapNumericExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapNumericExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapNumericExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapNumericExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapNumericExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapNumericExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapNumericExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapNumericExpression mutants"); }
    }
  }



  public static void mapComparitorExpression_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";

    try {
  String mapComparitorExpression_result = _self.mapComparitorExpression(ls,rs);
    System.out.println("Test 0 of mapComparitorExpression on " + _self + " result = " + mapComparitorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapComparitorExpression_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapComparitorExpression_result = _self.mapComparitorExpression(ls,rs);
    System.out.println("Test 1 of mapComparitorExpression on " + _self + " result = " + mapComparitorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapComparitorExpression_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapComparitorExpression_result = _self.mapComparitorExpression(ls,rs);
    System.out.println("Test 2 of mapComparitorExpression on " + _self + " result = " + mapComparitorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapComparitorExpression_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapComparitorExpression_result = _self.mapComparitorExpression(ls,rs);
    System.out.println("Test 3 of mapComparitorExpression on " + _self + " result = " + mapComparitorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapComparitorExpression_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapComparitorExpression_result = _self.mapComparitorExpression(ls,rs);
    System.out.println("Test 4 of mapComparitorExpression on " + _self + " result = " + mapComparitorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapComparitorExpression_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapComparitorExpression_result = _self.mapComparitorExpression(ls,rs);
    System.out.println("Test 5 of mapComparitorExpression on " + _self + " result = " + mapComparitorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapComparitorExpression_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapComparitorExpression_result = _self.mapComparitorExpression(ls,rs);
    System.out.println("Test 6 of mapComparitorExpression on " + _self + " result = " + mapComparitorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapComparitorExpression_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapComparitorExpression_result = _self.mapComparitorExpression(ls,rs);
    System.out.println("Test 7 of mapComparitorExpression on " + _self + " result = " + mapComparitorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapComparitorExpression_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapComparitorExpression_result = _self.mapComparitorExpression(ls,rs);
    System.out.println("Test 8 of mapComparitorExpression on " + _self + " result = " + mapComparitorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapComparitorExpression_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapComparitorExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapComparitorExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapComparitorExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapComparitorExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapComparitorExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapComparitorExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapComparitorExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapComparitorExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapComparitorExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapComparitorExpression mutants"); }
    }
  }



  public static void mapStringExpression_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";

    try {
  String mapStringExpression_result = _self.mapStringExpression(ls,rs);
    System.out.println("Test 0 of mapStringExpression on " + _self + " result = " + mapStringExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringExpression_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapStringExpression_result = _self.mapStringExpression(ls,rs);
    System.out.println("Test 1 of mapStringExpression on " + _self + " result = " + mapStringExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringExpression_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapStringExpression_result = _self.mapStringExpression(ls,rs);
    System.out.println("Test 2 of mapStringExpression on " + _self + " result = " + mapStringExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringExpression_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapStringExpression_result = _self.mapStringExpression(ls,rs);
    System.out.println("Test 3 of mapStringExpression on " + _self + " result = " + mapStringExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringExpression_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapStringExpression_result = _self.mapStringExpression(ls,rs);
    System.out.println("Test 4 of mapStringExpression on " + _self + " result = " + mapStringExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringExpression_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapStringExpression_result = _self.mapStringExpression(ls,rs);
    System.out.println("Test 5 of mapStringExpression on " + _self + " result = " + mapStringExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringExpression_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapStringExpression_result = _self.mapStringExpression(ls,rs);
    System.out.println("Test 6 of mapStringExpression on " + _self + " result = " + mapStringExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringExpression_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapStringExpression_result = _self.mapStringExpression(ls,rs);
    System.out.println("Test 7 of mapStringExpression on " + _self + " result = " + mapStringExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringExpression_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapStringExpression_result = _self.mapStringExpression(ls,rs);
    System.out.println("Test 8 of mapStringExpression on " + _self + " result = " + mapStringExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringExpression_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapStringExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapStringExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapStringExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapStringExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapStringExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapStringExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapStringExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapStringExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapStringExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapStringExpression mutants"); }
    }
  }



  public static void mapStringPlus_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";

    try {
  String mapStringPlus_result = _self.mapStringPlus(ls,rs);
    System.out.println("Test 0 of mapStringPlus on " + _self + " result = " + mapStringPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringPlus_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapStringPlus_result = _self.mapStringPlus(ls,rs);
    System.out.println("Test 1 of mapStringPlus on " + _self + " result = " + mapStringPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringPlus_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapStringPlus_result = _self.mapStringPlus(ls,rs);
    System.out.println("Test 2 of mapStringPlus on " + _self + " result = " + mapStringPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringPlus_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapStringPlus_result = _self.mapStringPlus(ls,rs);
    System.out.println("Test 3 of mapStringPlus on " + _self + " result = " + mapStringPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringPlus_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapStringPlus_result = _self.mapStringPlus(ls,rs);
    System.out.println("Test 4 of mapStringPlus on " + _self + " result = " + mapStringPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringPlus_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapStringPlus_result = _self.mapStringPlus(ls,rs);
    System.out.println("Test 5 of mapStringPlus on " + _self + " result = " + mapStringPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringPlus_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapStringPlus_result = _self.mapStringPlus(ls,rs);
    System.out.println("Test 6 of mapStringPlus on " + _self + " result = " + mapStringPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringPlus_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapStringPlus_result = _self.mapStringPlus(ls,rs);
    System.out.println("Test 7 of mapStringPlus on " + _self + " result = " + mapStringPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringPlus_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapStringPlus_result = _self.mapStringPlus(ls,rs);
    System.out.println("Test 8 of mapStringPlus on " + _self + " result = " + mapStringPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringPlus_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapStringPlus_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapStringPlus_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapStringPlus_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapStringPlus_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapStringPlus_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapStringPlus_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapStringPlus_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapStringPlus_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapStringPlus_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapStringPlus mutants"); }
    }
  }



  public static void mapRefPlus_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";

    try {
  String mapRefPlus_result = _self.mapRefPlus(ls,rs);
    System.out.println("Test 0 of mapRefPlus on " + _self + " result = " + mapRefPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapRefPlus_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapRefPlus_result = _self.mapRefPlus(ls,rs);
    System.out.println("Test 1 of mapRefPlus on " + _self + " result = " + mapRefPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapRefPlus_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapRefPlus_result = _self.mapRefPlus(ls,rs);
    System.out.println("Test 2 of mapRefPlus on " + _self + " result = " + mapRefPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapRefPlus_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapRefPlus_result = _self.mapRefPlus(ls,rs);
    System.out.println("Test 3 of mapRefPlus on " + _self + " result = " + mapRefPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapRefPlus_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapRefPlus_result = _self.mapRefPlus(ls,rs);
    System.out.println("Test 4 of mapRefPlus on " + _self + " result = " + mapRefPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapRefPlus_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapRefPlus_result = _self.mapRefPlus(ls,rs);
    System.out.println("Test 5 of mapRefPlus on " + _self + " result = " + mapRefPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapRefPlus_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapRefPlus_result = _self.mapRefPlus(ls,rs);
    System.out.println("Test 6 of mapRefPlus on " + _self + " result = " + mapRefPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapRefPlus_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapRefPlus_result = _self.mapRefPlus(ls,rs);
    System.out.println("Test 7 of mapRefPlus on " + _self + " result = " + mapRefPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapRefPlus_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapRefPlus_result = _self.mapRefPlus(ls,rs);
    System.out.println("Test 8 of mapRefPlus on " + _self + " result = " + mapRefPlus_result);

    } catch (Throwable _e) { }
 }



  public static void mapRefPlus_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapRefPlus_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapRefPlus_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapRefPlus_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapRefPlus_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapRefPlus_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapRefPlus_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapRefPlus_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapRefPlus_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapRefPlus_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapRefPlus mutants"); }
    }
  }



  public static void mapBooleanExpression_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";

    try {
  String mapBooleanExpression_result = _self.mapBooleanExpression(ls,rs);
    System.out.println("Test 0 of mapBooleanExpression on " + _self + " result = " + mapBooleanExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBooleanExpression_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapBooleanExpression_result = _self.mapBooleanExpression(ls,rs);
    System.out.println("Test 1 of mapBooleanExpression on " + _self + " result = " + mapBooleanExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBooleanExpression_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapBooleanExpression_result = _self.mapBooleanExpression(ls,rs);
    System.out.println("Test 2 of mapBooleanExpression on " + _self + " result = " + mapBooleanExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBooleanExpression_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapBooleanExpression_result = _self.mapBooleanExpression(ls,rs);
    System.out.println("Test 3 of mapBooleanExpression on " + _self + " result = " + mapBooleanExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBooleanExpression_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapBooleanExpression_result = _self.mapBooleanExpression(ls,rs);
    System.out.println("Test 4 of mapBooleanExpression on " + _self + " result = " + mapBooleanExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBooleanExpression_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapBooleanExpression_result = _self.mapBooleanExpression(ls,rs);
    System.out.println("Test 5 of mapBooleanExpression on " + _self + " result = " + mapBooleanExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBooleanExpression_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapBooleanExpression_result = _self.mapBooleanExpression(ls,rs);
    System.out.println("Test 6 of mapBooleanExpression on " + _self + " result = " + mapBooleanExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBooleanExpression_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapBooleanExpression_result = _self.mapBooleanExpression(ls,rs);
    System.out.println("Test 7 of mapBooleanExpression on " + _self + " result = " + mapBooleanExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBooleanExpression_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapBooleanExpression_result = _self.mapBooleanExpression(ls,rs);
    System.out.println("Test 8 of mapBooleanExpression on " + _self + " result = " + mapBooleanExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBooleanExpression_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapBooleanExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapBooleanExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapBooleanExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapBooleanExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapBooleanExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapBooleanExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapBooleanExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapBooleanExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapBooleanExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapBooleanExpression mutants"); }
    }
  }



  public static void mapBinaryCollectionExpression_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";
    String lt = "";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 0 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";
    String lt = "";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 1 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";
    String lt = "";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 2 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";
    String lt = " abc_XZ ";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 3 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";
    String lt = " abc_XZ ";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 4 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";
    String lt = " abc_XZ ";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 5 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";
    String lt = "#�$* &~@':";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 6 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";
    String lt = "#�$* &~@':";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 7 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";
    String lt = "#�$* &~@':";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 8 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_9(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";
    String lt = "";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 9 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_10(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";
    String lt = "";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 10 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_11(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";
    String lt = "";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 11 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_12(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";
    String lt = " abc_XZ ";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 12 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_13(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";
    String lt = " abc_XZ ";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 13 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_14(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";
    String lt = " abc_XZ ";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 14 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_15(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";
    String lt = "#�$* &~@':";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 15 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_16(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";
    String lt = "#�$* &~@':";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 16 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_17(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";
    String lt = "#�$* &~@':";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 17 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_18(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";
    String lt = "";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 18 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_19(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";
    String lt = "";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 19 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_20(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";
    String lt = "";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 20 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_21(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";
    String lt = " abc_XZ ";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 21 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_22(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";
    String lt = " abc_XZ ";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 22 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_23(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";
    String lt = " abc_XZ ";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 23 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_24(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";
    String lt = "#�$* &~@':";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 24 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_25(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";
    String lt = "#�$* &~@':";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 25 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_26(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";
    String lt = "#�$* &~@':";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 26 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_27(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";
    String lt = "";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 27 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_28(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";
    String lt = "";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 28 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_29(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";
    String lt = "";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 29 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_30(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";
    String lt = " abc_XZ ";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 30 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_31(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";
    String lt = " abc_XZ ";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 31 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_32(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";
    String lt = " abc_XZ ";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 32 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_33(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";
    String lt = "#�$* &~@':";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 33 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_34(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";
    String lt = "#�$* &~@':";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 34 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_35(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";
    String lt = "#�$* &~@':";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 35 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_36(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";
    String lt = "";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 36 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_37(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";
    String lt = "";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 37 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_38(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";
    String lt = "";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 38 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_39(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";
    String lt = " abc_XZ ";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 39 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_40(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";
    String lt = " abc_XZ ";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 40 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_41(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";
    String lt = " abc_XZ ";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 41 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_42(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";
    String lt = "#�$* &~@':";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 42 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_43(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";
    String lt = "#�$* &~@':";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 43 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_44(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";
    String lt = "#�$* &~@':";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 44 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_45(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";
    String lt = "";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 45 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_46(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";
    String lt = "";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 46 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_47(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";
    String lt = "";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 47 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_48(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";
    String lt = " abc_XZ ";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 48 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_49(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";
    String lt = " abc_XZ ";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 49 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_50(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";
    String lt = " abc_XZ ";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 50 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_51(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";
    String lt = "#�$* &~@':";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 51 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_52(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";
    String lt = "#�$* &~@':";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 52 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_53(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";
    String lt = "#�$* &~@':";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 53 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_54(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";
    String lt = "";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 54 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_55(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";
    String lt = "";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 55 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_56(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";
    String lt = "";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 56 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_57(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";
    String lt = " abc_XZ ";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 57 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_58(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";
    String lt = " abc_XZ ";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 58 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_59(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";
    String lt = " abc_XZ ";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 59 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_60(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";
    String lt = "#�$* &~@':";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 60 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_61(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";
    String lt = "#�$* &~@':";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 61 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_62(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";
    String lt = "#�$* &~@':";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 62 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_63(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";
    String lt = "";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 63 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_64(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";
    String lt = "";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 64 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_65(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";
    String lt = "";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 65 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_66(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";
    String lt = " abc_XZ ";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 66 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_67(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";
    String lt = " abc_XZ ";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 67 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_68(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";
    String lt = " abc_XZ ";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 68 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_69(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";
    String lt = "#�$* &~@':";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 69 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_70(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";
    String lt = "#�$* &~@':";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 70 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_71(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";
    String lt = "#�$* &~@':";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 71 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_72(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";
    String lt = "";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 72 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_73(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";
    String lt = "";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 73 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_74(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";
    String lt = "";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 74 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_75(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";
    String lt = " abc_XZ ";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 75 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_76(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";
    String lt = " abc_XZ ";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 76 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_77(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";
    String lt = " abc_XZ ";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 77 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_78(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";
    String lt = "#�$* &~@':";
    String rt = "";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 78 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_79(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";
    String lt = "#�$* &~@':";
    String rt = " abc_XZ ";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 79 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests_80(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";
    String lt = "#�$* &~@':";
    String rt = "#�$* &~@':";

    try {
  String mapBinaryCollectionExpression_result = _self.mapBinaryCollectionExpression(ls,rs,lt,rt);
    System.out.println("Test 80 of mapBinaryCollectionExpression on " + _self + " result = " + mapBinaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryCollectionExpression_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapBinaryCollectionExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapBinaryCollectionExpression_mutation_tests_80(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapBinaryCollectionExpression mutants"); }
    }
  }



  public static void mapBinaryMapExpression_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";

    try {
  String mapBinaryMapExpression_result = _self.mapBinaryMapExpression(ls,rs);
    System.out.println("Test 0 of mapBinaryMapExpression on " + _self + " result = " + mapBinaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryMapExpression_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapBinaryMapExpression_result = _self.mapBinaryMapExpression(ls,rs);
    System.out.println("Test 1 of mapBinaryMapExpression on " + _self + " result = " + mapBinaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryMapExpression_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapBinaryMapExpression_result = _self.mapBinaryMapExpression(ls,rs);
    System.out.println("Test 2 of mapBinaryMapExpression on " + _self + " result = " + mapBinaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryMapExpression_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapBinaryMapExpression_result = _self.mapBinaryMapExpression(ls,rs);
    System.out.println("Test 3 of mapBinaryMapExpression on " + _self + " result = " + mapBinaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryMapExpression_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapBinaryMapExpression_result = _self.mapBinaryMapExpression(ls,rs);
    System.out.println("Test 4 of mapBinaryMapExpression on " + _self + " result = " + mapBinaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryMapExpression_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapBinaryMapExpression_result = _self.mapBinaryMapExpression(ls,rs);
    System.out.println("Test 5 of mapBinaryMapExpression on " + _self + " result = " + mapBinaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryMapExpression_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapBinaryMapExpression_result = _self.mapBinaryMapExpression(ls,rs);
    System.out.println("Test 6 of mapBinaryMapExpression on " + _self + " result = " + mapBinaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryMapExpression_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapBinaryMapExpression_result = _self.mapBinaryMapExpression(ls,rs);
    System.out.println("Test 7 of mapBinaryMapExpression on " + _self + " result = " + mapBinaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryMapExpression_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapBinaryMapExpression_result = _self.mapBinaryMapExpression(ls,rs);
    System.out.println("Test 8 of mapBinaryMapExpression on " + _self + " result = " + mapBinaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryMapExpression_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapBinaryMapExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapBinaryMapExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapBinaryMapExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapBinaryMapExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapBinaryMapExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapBinaryMapExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapBinaryMapExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapBinaryMapExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapBinaryMapExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapBinaryMapExpression mutants"); }
    }
  }



  public static void mapDistributedIteratorExpression_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";
    UnaryExpression rexp = (UnaryExpression) Controller.inst().unaryexpressions.get(0);

    try {
  String mapDistributedIteratorExpression_result = _self.mapDistributedIteratorExpression(ls,rs,rexp);
    System.out.println("Test 0 of mapDistributedIteratorExpression on " + _self + " result = " + mapDistributedIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDistributedIteratorExpression_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";
    UnaryExpression rexp = (UnaryExpression) Controller.inst().unaryexpressions.get(0);

    try {
  String mapDistributedIteratorExpression_result = _self.mapDistributedIteratorExpression(ls,rs,rexp);
    System.out.println("Test 1 of mapDistributedIteratorExpression on " + _self + " result = " + mapDistributedIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDistributedIteratorExpression_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";
    UnaryExpression rexp = (UnaryExpression) Controller.inst().unaryexpressions.get(0);

    try {
  String mapDistributedIteratorExpression_result = _self.mapDistributedIteratorExpression(ls,rs,rexp);
    System.out.println("Test 2 of mapDistributedIteratorExpression on " + _self + " result = " + mapDistributedIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDistributedIteratorExpression_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";
    UnaryExpression rexp = (UnaryExpression) Controller.inst().unaryexpressions.get(0);

    try {
  String mapDistributedIteratorExpression_result = _self.mapDistributedIteratorExpression(ls,rs,rexp);
    System.out.println("Test 3 of mapDistributedIteratorExpression on " + _self + " result = " + mapDistributedIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDistributedIteratorExpression_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";
    UnaryExpression rexp = (UnaryExpression) Controller.inst().unaryexpressions.get(0);

    try {
  String mapDistributedIteratorExpression_result = _self.mapDistributedIteratorExpression(ls,rs,rexp);
    System.out.println("Test 4 of mapDistributedIteratorExpression on " + _self + " result = " + mapDistributedIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDistributedIteratorExpression_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";
    UnaryExpression rexp = (UnaryExpression) Controller.inst().unaryexpressions.get(0);

    try {
  String mapDistributedIteratorExpression_result = _self.mapDistributedIteratorExpression(ls,rs,rexp);
    System.out.println("Test 5 of mapDistributedIteratorExpression on " + _self + " result = " + mapDistributedIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDistributedIteratorExpression_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";
    UnaryExpression rexp = (UnaryExpression) Controller.inst().unaryexpressions.get(0);

    try {
  String mapDistributedIteratorExpression_result = _self.mapDistributedIteratorExpression(ls,rs,rexp);
    System.out.println("Test 6 of mapDistributedIteratorExpression on " + _self + " result = " + mapDistributedIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDistributedIteratorExpression_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";
    UnaryExpression rexp = (UnaryExpression) Controller.inst().unaryexpressions.get(0);

    try {
  String mapDistributedIteratorExpression_result = _self.mapDistributedIteratorExpression(ls,rs,rexp);
    System.out.println("Test 7 of mapDistributedIteratorExpression on " + _self + " result = " + mapDistributedIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDistributedIteratorExpression_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";
    UnaryExpression rexp = (UnaryExpression) Controller.inst().unaryexpressions.get(0);

    try {
  String mapDistributedIteratorExpression_result = _self.mapDistributedIteratorExpression(ls,rs,rexp);
    System.out.println("Test 8 of mapDistributedIteratorExpression on " + _self + " result = " + mapDistributedIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapDistributedIteratorExpression_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapDistributedIteratorExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapDistributedIteratorExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapDistributedIteratorExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapDistributedIteratorExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapDistributedIteratorExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapDistributedIteratorExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapDistributedIteratorExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapDistributedIteratorExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapDistributedIteratorExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapDistributedIteratorExpression mutants"); }
    }
  }



  public static void mapMapIteratorExpression_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";

    try {
  String mapMapIteratorExpression_result = _self.mapMapIteratorExpression(ls,rs);
    System.out.println("Test 0 of mapMapIteratorExpression on " + _self + " result = " + mapMapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapMapIteratorExpression_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapMapIteratorExpression_result = _self.mapMapIteratorExpression(ls,rs);
    System.out.println("Test 1 of mapMapIteratorExpression on " + _self + " result = " + mapMapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapMapIteratorExpression_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapMapIteratorExpression_result = _self.mapMapIteratorExpression(ls,rs);
    System.out.println("Test 2 of mapMapIteratorExpression on " + _self + " result = " + mapMapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapMapIteratorExpression_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapMapIteratorExpression_result = _self.mapMapIteratorExpression(ls,rs);
    System.out.println("Test 3 of mapMapIteratorExpression on " + _self + " result = " + mapMapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapMapIteratorExpression_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapMapIteratorExpression_result = _self.mapMapIteratorExpression(ls,rs);
    System.out.println("Test 4 of mapMapIteratorExpression on " + _self + " result = " + mapMapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapMapIteratorExpression_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapMapIteratorExpression_result = _self.mapMapIteratorExpression(ls,rs);
    System.out.println("Test 5 of mapMapIteratorExpression on " + _self + " result = " + mapMapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapMapIteratorExpression_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapMapIteratorExpression_result = _self.mapMapIteratorExpression(ls,rs);
    System.out.println("Test 6 of mapMapIteratorExpression on " + _self + " result = " + mapMapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapMapIteratorExpression_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapMapIteratorExpression_result = _self.mapMapIteratorExpression(ls,rs);
    System.out.println("Test 7 of mapMapIteratorExpression on " + _self + " result = " + mapMapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapMapIteratorExpression_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapMapIteratorExpression_result = _self.mapMapIteratorExpression(ls,rs);
    System.out.println("Test 8 of mapMapIteratorExpression on " + _self + " result = " + mapMapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapMapIteratorExpression_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapMapIteratorExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapMapIteratorExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapMapIteratorExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapMapIteratorExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapMapIteratorExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapMapIteratorExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapMapIteratorExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapMapIteratorExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapMapIteratorExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapMapIteratorExpression mutants"); }
    }
  }



  public static void mapIteratorExpression_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";
    String tn = "";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 0 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";
    String tn = " abc_XZ ";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 1 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";
    String tn = "#�$* &~@':";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 2 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";
    String tn = "";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 3 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";
    String tn = " abc_XZ ";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 4 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";
    String tn = "#�$* &~@':";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 5 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";
    String tn = "";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 6 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";
    String tn = " abc_XZ ";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 7 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";
    String tn = "#�$* &~@':";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 8 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_9(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";
    String tn = "";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 9 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_10(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";
    String tn = " abc_XZ ";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 10 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_11(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";
    String tn = "#�$* &~@':";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 11 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_12(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";
    String tn = "";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 12 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_13(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";
    String tn = " abc_XZ ";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 13 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_14(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";
    String tn = "#�$* &~@':";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 14 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_15(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";
    String tn = "";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 15 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_16(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";
    String tn = " abc_XZ ";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 16 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_17(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";
    String tn = "#�$* &~@':";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 17 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_18(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";
    String tn = "";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 18 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_19(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";
    String tn = " abc_XZ ";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 19 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_20(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";
    String tn = "#�$* &~@':";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 20 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_21(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";
    String tn = "";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 21 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_22(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";
    String tn = " abc_XZ ";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 22 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_23(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";
    String tn = "#�$* &~@':";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 23 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_24(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";
    String tn = "";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 24 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_25(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";
    String tn = " abc_XZ ";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 25 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests_26(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";
    String tn = "#�$* &~@':";

    try {
  String mapIteratorExpression_result = _self.mapIteratorExpression(ls,rs,tn);
    System.out.println("Test 26 of mapIteratorExpression on " + _self + " result = " + mapIteratorExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIteratorExpression_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapIteratorExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapIteratorExpression_mutation_tests_26(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapIteratorExpression mutants"); }
    }
  }



  public static void mapTypeCastExpression_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";

    try {
  String mapTypeCastExpression_result = _self.mapTypeCastExpression(ls,rs);
    System.out.println("Test 0 of mapTypeCastExpression on " + _self + " result = " + mapTypeCastExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapTypeCastExpression_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapTypeCastExpression_result = _self.mapTypeCastExpression(ls,rs);
    System.out.println("Test 1 of mapTypeCastExpression on " + _self + " result = " + mapTypeCastExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapTypeCastExpression_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapTypeCastExpression_result = _self.mapTypeCastExpression(ls,rs);
    System.out.println("Test 2 of mapTypeCastExpression on " + _self + " result = " + mapTypeCastExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapTypeCastExpression_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapTypeCastExpression_result = _self.mapTypeCastExpression(ls,rs);
    System.out.println("Test 3 of mapTypeCastExpression on " + _self + " result = " + mapTypeCastExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapTypeCastExpression_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapTypeCastExpression_result = _self.mapTypeCastExpression(ls,rs);
    System.out.println("Test 4 of mapTypeCastExpression on " + _self + " result = " + mapTypeCastExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapTypeCastExpression_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapTypeCastExpression_result = _self.mapTypeCastExpression(ls,rs);
    System.out.println("Test 5 of mapTypeCastExpression on " + _self + " result = " + mapTypeCastExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapTypeCastExpression_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapTypeCastExpression_result = _self.mapTypeCastExpression(ls,rs);
    System.out.println("Test 6 of mapTypeCastExpression on " + _self + " result = " + mapTypeCastExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapTypeCastExpression_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapTypeCastExpression_result = _self.mapTypeCastExpression(ls,rs);
    System.out.println("Test 7 of mapTypeCastExpression on " + _self + " result = " + mapTypeCastExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapTypeCastExpression_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapTypeCastExpression_result = _self.mapTypeCastExpression(ls,rs);
    System.out.println("Test 8 of mapTypeCastExpression on " + _self + " result = " + mapTypeCastExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapTypeCastExpression_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapTypeCastExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapTypeCastExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapTypeCastExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapTypeCastExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapTypeCastExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapTypeCastExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapTypeCastExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapTypeCastExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapTypeCastExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapTypeCastExpression mutants"); }
    }
  }



  public static void mapCatchExpression_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";

    try {
  String mapCatchExpression_result = _self.mapCatchExpression(ls,rs);
    System.out.println("Test 0 of mapCatchExpression on " + _self + " result = " + mapCatchExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCatchExpression_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapCatchExpression_result = _self.mapCatchExpression(ls,rs);
    System.out.println("Test 1 of mapCatchExpression on " + _self + " result = " + mapCatchExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCatchExpression_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapCatchExpression_result = _self.mapCatchExpression(ls,rs);
    System.out.println("Test 2 of mapCatchExpression on " + _self + " result = " + mapCatchExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCatchExpression_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapCatchExpression_result = _self.mapCatchExpression(ls,rs);
    System.out.println("Test 3 of mapCatchExpression on " + _self + " result = " + mapCatchExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCatchExpression_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapCatchExpression_result = _self.mapCatchExpression(ls,rs);
    System.out.println("Test 4 of mapCatchExpression on " + _self + " result = " + mapCatchExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCatchExpression_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapCatchExpression_result = _self.mapCatchExpression(ls,rs);
    System.out.println("Test 5 of mapCatchExpression on " + _self + " result = " + mapCatchExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCatchExpression_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapCatchExpression_result = _self.mapCatchExpression(ls,rs);
    System.out.println("Test 6 of mapCatchExpression on " + _self + " result = " + mapCatchExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCatchExpression_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapCatchExpression_result = _self.mapCatchExpression(ls,rs);
    System.out.println("Test 7 of mapCatchExpression on " + _self + " result = " + mapCatchExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCatchExpression_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapCatchExpression_result = _self.mapCatchExpression(ls,rs);
    System.out.println("Test 8 of mapCatchExpression on " + _self + " result = " + mapCatchExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCatchExpression_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapCatchExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapCatchExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapCatchExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapCatchExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapCatchExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapCatchExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapCatchExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapCatchExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapCatchExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapCatchExpression mutants"); }
    }
  }



  public static void mapBinaryExpression_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";

    try {
  String mapBinaryExpression_result = _self.mapBinaryExpression(ls,rs);
    System.out.println("Test 0 of mapBinaryExpression on " + _self + " result = " + mapBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryExpression_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapBinaryExpression_result = _self.mapBinaryExpression(ls,rs);
    System.out.println("Test 1 of mapBinaryExpression on " + _self + " result = " + mapBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryExpression_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapBinaryExpression_result = _self.mapBinaryExpression(ls,rs);
    System.out.println("Test 2 of mapBinaryExpression on " + _self + " result = " + mapBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryExpression_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapBinaryExpression_result = _self.mapBinaryExpression(ls,rs);
    System.out.println("Test 3 of mapBinaryExpression on " + _self + " result = " + mapBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryExpression_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapBinaryExpression_result = _self.mapBinaryExpression(ls,rs);
    System.out.println("Test 4 of mapBinaryExpression on " + _self + " result = " + mapBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryExpression_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapBinaryExpression_result = _self.mapBinaryExpression(ls,rs);
    System.out.println("Test 5 of mapBinaryExpression on " + _self + " result = " + mapBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryExpression_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapBinaryExpression_result = _self.mapBinaryExpression(ls,rs);
    System.out.println("Test 6 of mapBinaryExpression on " + _self + " result = " + mapBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryExpression_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapBinaryExpression_result = _self.mapBinaryExpression(ls,rs);
    System.out.println("Test 7 of mapBinaryExpression on " + _self + " result = " + mapBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryExpression_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapBinaryExpression_result = _self.mapBinaryExpression(ls,rs);
    System.out.println("Test 8 of mapBinaryExpression on " + _self + " result = " + mapBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBinaryExpression_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapBinaryExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapBinaryExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapBinaryExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapBinaryExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapBinaryExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapBinaryExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapBinaryExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapBinaryExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapBinaryExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapBinaryExpression mutants"); }
    }
  }



  public static void updateFormBinaryExpression_mutation_tests_0(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "";

    try {
  String updateFormBinaryExpression_result = _self.updateFormBinaryExpression(ls,rs);
    System.out.println("Test 0 of updateFormBinaryExpression on " + _self + " result = " + updateFormBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormBinaryExpression_mutation_tests_1(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = " abc_XZ ";

    try {
  String updateFormBinaryExpression_result = _self.updateFormBinaryExpression(ls,rs);
    System.out.println("Test 1 of updateFormBinaryExpression on " + _self + " result = " + updateFormBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormBinaryExpression_mutation_tests_2(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "";
    String rs = "#�$* &~@':";

    try {
  String updateFormBinaryExpression_result = _self.updateFormBinaryExpression(ls,rs);
    System.out.println("Test 2 of updateFormBinaryExpression on " + _self + " result = " + updateFormBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormBinaryExpression_mutation_tests_3(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "";

    try {
  String updateFormBinaryExpression_result = _self.updateFormBinaryExpression(ls,rs);
    System.out.println("Test 3 of updateFormBinaryExpression on " + _self + " result = " + updateFormBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormBinaryExpression_mutation_tests_4(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String updateFormBinaryExpression_result = _self.updateFormBinaryExpression(ls,rs);
    System.out.println("Test 4 of updateFormBinaryExpression on " + _self + " result = " + updateFormBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormBinaryExpression_mutation_tests_5(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String updateFormBinaryExpression_result = _self.updateFormBinaryExpression(ls,rs);
    System.out.println("Test 5 of updateFormBinaryExpression on " + _self + " result = " + updateFormBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormBinaryExpression_mutation_tests_6(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "";

    try {
  String updateFormBinaryExpression_result = _self.updateFormBinaryExpression(ls,rs);
    System.out.println("Test 6 of updateFormBinaryExpression on " + _self + " result = " + updateFormBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormBinaryExpression_mutation_tests_7(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String updateFormBinaryExpression_result = _self.updateFormBinaryExpression(ls,rs);
    System.out.println("Test 7 of updateFormBinaryExpression on " + _self + " result = " + updateFormBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormBinaryExpression_mutation_tests_8(BinaryExpression _self, int[] _counts, int[] _totals)
  {
        String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String updateFormBinaryExpression_result = _self.updateFormBinaryExpression(ls,rs);
    System.out.println("Test 8 of updateFormBinaryExpression on " + _self + " result = " + updateFormBinaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormBinaryExpression_mutation_tests(BinaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.updateFormBinaryExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.updateFormBinaryExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.updateFormBinaryExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.updateFormBinaryExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.updateFormBinaryExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.updateFormBinaryExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.updateFormBinaryExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.updateFormBinaryExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.updateFormBinaryExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% updateFormBinaryExpression mutants"); }
    }
  }



  public static void mapConditionalExpression_mutation_tests_0(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = "";
    String rs = "";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 0 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_1(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 1 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_2(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 2 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_3(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 3 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_4(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 4 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_5(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 5 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_6(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 6 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_7(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 7 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_8(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 8 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_9(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = "";
    String rs = "";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 9 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_10(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 10 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_11(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 11 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_12(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 12 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_13(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 13 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_14(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 14 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_15(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 15 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_16(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 16 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_17(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 17 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_18(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = "";
    String rs = "";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 18 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_19(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = "";
    String rs = " abc_XZ ";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 19 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_20(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = "";
    String rs = "#�$* &~@':";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 20 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_21(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = " abc_XZ ";
    String rs = "";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 21 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_22(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 22 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_23(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 23 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_24(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = "#�$* &~@':";
    String rs = "";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 24 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_25(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 25 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests_26(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String mapConditionalExpression_result = _self.mapConditionalExpression(ts,ls,rs);
    System.out.println("Test 26 of mapConditionalExpression on " + _self + " result = " + mapConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapConditionalExpression_mutation_tests(ConditionalExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapConditionalExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapConditionalExpression_mutation_tests_26(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapConditionalExpression mutants"); }
    }
  }



  public static void updateFormConditionalExpression_mutation_tests_0(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = "";
    String rs = "";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 0 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_1(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = "";
    String rs = " abc_XZ ";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 1 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_2(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = "";
    String rs = "#�$* &~@':";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 2 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_3(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = " abc_XZ ";
    String rs = "";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 3 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_4(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 4 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_5(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 5 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_6(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = "#�$* &~@':";
    String rs = "";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 6 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_7(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 7 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_8(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "";
    String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 8 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_9(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = "";
    String rs = "";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 9 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_10(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = "";
    String rs = " abc_XZ ";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 10 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_11(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = "";
    String rs = "#�$* &~@':";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 11 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_12(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = " abc_XZ ";
    String rs = "";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 12 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_13(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 13 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_14(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 14 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_15(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = "#�$* &~@':";
    String rs = "";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 15 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_16(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 16 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_17(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = " abc_XZ ";
    String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 17 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_18(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = "";
    String rs = "";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 18 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_19(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = "";
    String rs = " abc_XZ ";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 19 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_20(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = "";
    String rs = "#�$* &~@':";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 20 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_21(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = " abc_XZ ";
    String rs = "";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 21 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_22(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = " abc_XZ ";
    String rs = " abc_XZ ";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 22 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_23(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = " abc_XZ ";
    String rs = "#�$* &~@':";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 23 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_24(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = "#�$* &~@':";
    String rs = "";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 24 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_25(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = "#�$* &~@':";
    String rs = " abc_XZ ";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 25 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests_26(ConditionalExpression _self, int[] _counts, int[] _totals)
  {
        String ts = "#�$* &~@':";
    String ls = "#�$* &~@':";
    String rs = "#�$* &~@':";

    try {
  String updateFormConditionalExpression_result = _self.updateFormConditionalExpression(ts,ls,rs);
    System.out.println("Test 26 of updateFormConditionalExpression on " + _self + " result = " + updateFormConditionalExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormConditionalExpression_mutation_tests(ConditionalExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.updateFormConditionalExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.updateFormConditionalExpression_mutation_tests_26(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% updateFormConditionalExpression mutants"); }
    }
  }



  public static void isUnaryStringOp_mutation_tests_0(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "";

    try {
  boolean isUnaryStringOp_result = _self.isUnaryStringOp(fname);
    System.out.println("Test 0 of isUnaryStringOp on " + _self + " result = " + isUnaryStringOp_result);

    } catch (Throwable _e) { }
 }



  public static void isUnaryStringOp_mutation_tests_1(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = " abc_XZ ";

    try {
  boolean isUnaryStringOp_result = _self.isUnaryStringOp(fname);
    System.out.println("Test 1 of isUnaryStringOp on " + _self + " result = " + isUnaryStringOp_result);

    } catch (Throwable _e) { }
 }



  public static void isUnaryStringOp_mutation_tests_2(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "#�$* &~@':";

    try {
  boolean isUnaryStringOp_result = _self.isUnaryStringOp(fname);
    System.out.println("Test 2 of isUnaryStringOp on " + _self + " result = " + isUnaryStringOp_result);

    } catch (Throwable _e) { }
 }



  public static void isUnaryStringOp_mutation_tests(UnaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.isUnaryStringOp_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isUnaryStringOp_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isUnaryStringOp_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isUnaryStringOp mutants"); }
    }
  }



  public static void isReduceOp_mutation_tests_0(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "";

    try {
  boolean isReduceOp_result = _self.isReduceOp(fname);
    System.out.println("Test 0 of isReduceOp on " + _self + " result = " + isReduceOp_result);

    } catch (Throwable _e) { }
 }



  public static void isReduceOp_mutation_tests_1(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = " abc_XZ ";

    try {
  boolean isReduceOp_result = _self.isReduceOp(fname);
    System.out.println("Test 1 of isReduceOp on " + _self + " result = " + isReduceOp_result);

    } catch (Throwable _e) { }
 }



  public static void isReduceOp_mutation_tests_2(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "#�$* &~@':";

    try {
  boolean isReduceOp_result = _self.isReduceOp(fname);
    System.out.println("Test 2 of isReduceOp on " + _self + " result = " + isReduceOp_result);

    } catch (Throwable _e) { }
 }



  public static void isReduceOp_mutation_tests(UnaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.isReduceOp_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isReduceOp_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isReduceOp_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isReduceOp mutants"); }
    }
  }



  public static void mapNumericExpression_mutation_tests_0(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "";

    try {
  String mapNumericExpression_result = _self.mapNumericExpression(arg);
    System.out.println("Test 0 of mapNumericExpression on " + _self + " result = " + mapNumericExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapNumericExpression_mutation_tests_1(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = " abc_XZ ";

    try {
  String mapNumericExpression_result = _self.mapNumericExpression(arg);
    System.out.println("Test 1 of mapNumericExpression on " + _self + " result = " + mapNumericExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapNumericExpression_mutation_tests_2(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "#�$* &~@':";

    try {
  String mapNumericExpression_result = _self.mapNumericExpression(arg);
    System.out.println("Test 2 of mapNumericExpression on " + _self + " result = " + mapNumericExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapNumericExpression_mutation_tests(UnaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapNumericExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapNumericExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapNumericExpression_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapNumericExpression mutants"); }
    }
  }



  public static void mapStringExpression_mutation_tests_0(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "";

    try {
  String mapStringExpression_result = _self.mapStringExpression(arg);
    System.out.println("Test 0 of mapStringExpression on " + _self + " result = " + mapStringExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringExpression_mutation_tests_1(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = " abc_XZ ";

    try {
  String mapStringExpression_result = _self.mapStringExpression(arg);
    System.out.println("Test 1 of mapStringExpression on " + _self + " result = " + mapStringExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringExpression_mutation_tests_2(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "#�$* &~@':";

    try {
  String mapStringExpression_result = _self.mapStringExpression(arg);
    System.out.println("Test 2 of mapStringExpression on " + _self + " result = " + mapStringExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStringExpression_mutation_tests(UnaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapStringExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapStringExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapStringExpression_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapStringExpression mutants"); }
    }
  }



  public static void mapReduceExpression_mutation_tests_0(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "";
    String tn = "";
    Entity et = (Entity) Controller.inst().entitys.get(0);

    try {
  String mapReduceExpression_result = _self.mapReduceExpression(arg,tn,et);
    System.out.println("Test 0 of mapReduceExpression on " + _self + " result = " + mapReduceExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReduceExpression_mutation_tests_1(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "";
    String tn = " abc_XZ ";
    Entity et = (Entity) Controller.inst().entitys.get(0);

    try {
  String mapReduceExpression_result = _self.mapReduceExpression(arg,tn,et);
    System.out.println("Test 1 of mapReduceExpression on " + _self + " result = " + mapReduceExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReduceExpression_mutation_tests_2(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "";
    String tn = "#�$* &~@':";
    Entity et = (Entity) Controller.inst().entitys.get(0);

    try {
  String mapReduceExpression_result = _self.mapReduceExpression(arg,tn,et);
    System.out.println("Test 2 of mapReduceExpression on " + _self + " result = " + mapReduceExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReduceExpression_mutation_tests_3(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = " abc_XZ ";
    String tn = "";
    Entity et = (Entity) Controller.inst().entitys.get(0);

    try {
  String mapReduceExpression_result = _self.mapReduceExpression(arg,tn,et);
    System.out.println("Test 3 of mapReduceExpression on " + _self + " result = " + mapReduceExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReduceExpression_mutation_tests_4(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = " abc_XZ ";
    String tn = " abc_XZ ";
    Entity et = (Entity) Controller.inst().entitys.get(0);

    try {
  String mapReduceExpression_result = _self.mapReduceExpression(arg,tn,et);
    System.out.println("Test 4 of mapReduceExpression on " + _self + " result = " + mapReduceExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReduceExpression_mutation_tests_5(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = " abc_XZ ";
    String tn = "#�$* &~@':";
    Entity et = (Entity) Controller.inst().entitys.get(0);

    try {
  String mapReduceExpression_result = _self.mapReduceExpression(arg,tn,et);
    System.out.println("Test 5 of mapReduceExpression on " + _self + " result = " + mapReduceExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReduceExpression_mutation_tests_6(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "#�$* &~@':";
    String tn = "";
    Entity et = (Entity) Controller.inst().entitys.get(0);

    try {
  String mapReduceExpression_result = _self.mapReduceExpression(arg,tn,et);
    System.out.println("Test 6 of mapReduceExpression on " + _self + " result = " + mapReduceExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReduceExpression_mutation_tests_7(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "#�$* &~@':";
    String tn = " abc_XZ ";
    Entity et = (Entity) Controller.inst().entitys.get(0);

    try {
  String mapReduceExpression_result = _self.mapReduceExpression(arg,tn,et);
    System.out.println("Test 7 of mapReduceExpression on " + _self + " result = " + mapReduceExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReduceExpression_mutation_tests_8(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "#�$* &~@':";
    String tn = "#�$* &~@':";
    Entity et = (Entity) Controller.inst().entitys.get(0);

    try {
  String mapReduceExpression_result = _self.mapReduceExpression(arg,tn,et);
    System.out.println("Test 8 of mapReduceExpression on " + _self + " result = " + mapReduceExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReduceExpression_mutation_tests(UnaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapReduceExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapReduceExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapReduceExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapReduceExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapReduceExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapReduceExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapReduceExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapReduceExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapReduceExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapReduceExpression mutants"); }
    }
  }



  public static void mapUnaryCollectionExpression_mutation_tests_0(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "";
    String tn = "";

    try {
  String mapUnaryCollectionExpression_result = _self.mapUnaryCollectionExpression(arg,tn);
    System.out.println("Test 0 of mapUnaryCollectionExpression on " + _self + " result = " + mapUnaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryCollectionExpression_mutation_tests_1(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "";
    String tn = " abc_XZ ";

    try {
  String mapUnaryCollectionExpression_result = _self.mapUnaryCollectionExpression(arg,tn);
    System.out.println("Test 1 of mapUnaryCollectionExpression on " + _self + " result = " + mapUnaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryCollectionExpression_mutation_tests_2(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "";
    String tn = "#�$* &~@':";

    try {
  String mapUnaryCollectionExpression_result = _self.mapUnaryCollectionExpression(arg,tn);
    System.out.println("Test 2 of mapUnaryCollectionExpression on " + _self + " result = " + mapUnaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryCollectionExpression_mutation_tests_3(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = " abc_XZ ";
    String tn = "";

    try {
  String mapUnaryCollectionExpression_result = _self.mapUnaryCollectionExpression(arg,tn);
    System.out.println("Test 3 of mapUnaryCollectionExpression on " + _self + " result = " + mapUnaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryCollectionExpression_mutation_tests_4(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = " abc_XZ ";
    String tn = " abc_XZ ";

    try {
  String mapUnaryCollectionExpression_result = _self.mapUnaryCollectionExpression(arg,tn);
    System.out.println("Test 4 of mapUnaryCollectionExpression on " + _self + " result = " + mapUnaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryCollectionExpression_mutation_tests_5(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = " abc_XZ ";
    String tn = "#�$* &~@':";

    try {
  String mapUnaryCollectionExpression_result = _self.mapUnaryCollectionExpression(arg,tn);
    System.out.println("Test 5 of mapUnaryCollectionExpression on " + _self + " result = " + mapUnaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryCollectionExpression_mutation_tests_6(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "#�$* &~@':";
    String tn = "";

    try {
  String mapUnaryCollectionExpression_result = _self.mapUnaryCollectionExpression(arg,tn);
    System.out.println("Test 6 of mapUnaryCollectionExpression on " + _self + " result = " + mapUnaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryCollectionExpression_mutation_tests_7(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "#�$* &~@':";
    String tn = " abc_XZ ";

    try {
  String mapUnaryCollectionExpression_result = _self.mapUnaryCollectionExpression(arg,tn);
    System.out.println("Test 7 of mapUnaryCollectionExpression on " + _self + " result = " + mapUnaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryCollectionExpression_mutation_tests_8(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "#�$* &~@':";
    String tn = "#�$* &~@':";

    try {
  String mapUnaryCollectionExpression_result = _self.mapUnaryCollectionExpression(arg,tn);
    System.out.println("Test 8 of mapUnaryCollectionExpression on " + _self + " result = " + mapUnaryCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryCollectionExpression_mutation_tests(UnaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapUnaryCollectionExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapUnaryCollectionExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapUnaryCollectionExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapUnaryCollectionExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapUnaryCollectionExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapUnaryCollectionExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapUnaryCollectionExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapUnaryCollectionExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapUnaryCollectionExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapUnaryCollectionExpression mutants"); }
    }
  }



  public static void mapUnaryMapExpression_mutation_tests_0(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "";
    String tn = "";

    try {
  String mapUnaryMapExpression_result = _self.mapUnaryMapExpression(arg,tn);
    System.out.println("Test 0 of mapUnaryMapExpression on " + _self + " result = " + mapUnaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryMapExpression_mutation_tests_1(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "";
    String tn = " abc_XZ ";

    try {
  String mapUnaryMapExpression_result = _self.mapUnaryMapExpression(arg,tn);
    System.out.println("Test 1 of mapUnaryMapExpression on " + _self + " result = " + mapUnaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryMapExpression_mutation_tests_2(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "";
    String tn = "#�$* &~@':";

    try {
  String mapUnaryMapExpression_result = _self.mapUnaryMapExpression(arg,tn);
    System.out.println("Test 2 of mapUnaryMapExpression on " + _self + " result = " + mapUnaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryMapExpression_mutation_tests_3(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = " abc_XZ ";
    String tn = "";

    try {
  String mapUnaryMapExpression_result = _self.mapUnaryMapExpression(arg,tn);
    System.out.println("Test 3 of mapUnaryMapExpression on " + _self + " result = " + mapUnaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryMapExpression_mutation_tests_4(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = " abc_XZ ";
    String tn = " abc_XZ ";

    try {
  String mapUnaryMapExpression_result = _self.mapUnaryMapExpression(arg,tn);
    System.out.println("Test 4 of mapUnaryMapExpression on " + _self + " result = " + mapUnaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryMapExpression_mutation_tests_5(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = " abc_XZ ";
    String tn = "#�$* &~@':";

    try {
  String mapUnaryMapExpression_result = _self.mapUnaryMapExpression(arg,tn);
    System.out.println("Test 5 of mapUnaryMapExpression on " + _self + " result = " + mapUnaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryMapExpression_mutation_tests_6(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "#�$* &~@':";
    String tn = "";

    try {
  String mapUnaryMapExpression_result = _self.mapUnaryMapExpression(arg,tn);
    System.out.println("Test 6 of mapUnaryMapExpression on " + _self + " result = " + mapUnaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryMapExpression_mutation_tests_7(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "#�$* &~@':";
    String tn = " abc_XZ ";

    try {
  String mapUnaryMapExpression_result = _self.mapUnaryMapExpression(arg,tn);
    System.out.println("Test 7 of mapUnaryMapExpression on " + _self + " result = " + mapUnaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryMapExpression_mutation_tests_8(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "#�$* &~@':";
    String tn = "#�$* &~@':";

    try {
  String mapUnaryMapExpression_result = _self.mapUnaryMapExpression(arg,tn);
    System.out.println("Test 8 of mapUnaryMapExpression on " + _self + " result = " + mapUnaryMapExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryMapExpression_mutation_tests(UnaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapUnaryMapExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapUnaryMapExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapUnaryMapExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapUnaryMapExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapUnaryMapExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapUnaryMapExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapUnaryMapExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapUnaryMapExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapUnaryMapExpression_mutation_tests_8(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapUnaryMapExpression mutants"); }
    }
  }



  public static void mapUnaryExpression_mutation_tests_0(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "";

    try {
  String mapUnaryExpression_result = _self.mapUnaryExpression(arg);
    System.out.println("Test 0 of mapUnaryExpression on " + _self + " result = " + mapUnaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryExpression_mutation_tests_1(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = " abc_XZ ";

    try {
  String mapUnaryExpression_result = _self.mapUnaryExpression(arg);
    System.out.println("Test 1 of mapUnaryExpression on " + _self + " result = " + mapUnaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryExpression_mutation_tests_2(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "#�$* &~@':";

    try {
  String mapUnaryExpression_result = _self.mapUnaryExpression(arg);
    System.out.println("Test 2 of mapUnaryExpression on " + _self + " result = " + mapUnaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapUnaryExpression_mutation_tests(UnaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapUnaryExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapUnaryExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapUnaryExpression_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapUnaryExpression mutants"); }
    }
  }



  public static void updateFormUnaryExpression_mutation_tests_0(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "";

    try {
  String updateFormUnaryExpression_result = _self.updateFormUnaryExpression(arg);
    System.out.println("Test 0 of updateFormUnaryExpression on " + _self + " result = " + updateFormUnaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormUnaryExpression_mutation_tests_1(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = " abc_XZ ";

    try {
  String updateFormUnaryExpression_result = _self.updateFormUnaryExpression(arg);
    System.out.println("Test 1 of updateFormUnaryExpression on " + _self + " result = " + updateFormUnaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormUnaryExpression_mutation_tests_2(UnaryExpression _self, int[] _counts, int[] _totals)
  {
        String arg = "#�$* &~@':";

    try {
  String updateFormUnaryExpression_result = _self.updateFormUnaryExpression(arg);
    System.out.println("Test 2 of updateFormUnaryExpression on " + _self + " result = " + updateFormUnaryExpression_result);

    } catch (Throwable _e) { }
 }



  public static void updateFormUnaryExpression_mutation_tests(UnaryExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.updateFormUnaryExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.updateFormUnaryExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.updateFormUnaryExpression_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% updateFormUnaryExpression mutants"); }
    }
  }



  public static void mapCollectionExpression_mutation_tests_0(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = new Vector();
    String tn = "";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 0 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests_1(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = new Vector();
    String tn = " abc_XZ ";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 1 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests_2(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = new Vector();
    String tn = "#�$* &~@':";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 2 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests_3(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = (new SystemTypes.Set()).add("").getElements();
    String tn = "";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 3 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests_4(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = (new SystemTypes.Set()).add("").getElements();
    String tn = " abc_XZ ";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 4 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests_5(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = (new SystemTypes.Set()).add("").getElements();
    String tn = "#�$* &~@':";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 5 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests_6(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    String tn = "";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 6 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests_7(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    String tn = " abc_XZ ";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 7 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests_8(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    String tn = "#�$* &~@':";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 8 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests_9(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    String tn = "";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 9 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests_10(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    String tn = " abc_XZ ";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 10 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests_11(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    String tn = "#�$* &~@':";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 11 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests_12(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    String tn = "";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 12 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests_13(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    String tn = " abc_XZ ";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 13 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests_14(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        List elems = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    String tn = "#�$* &~@':";

    try {
  String mapCollectionExpression_result = _self.mapCollectionExpression(elems,tn);
    System.out.println("Test 14 of mapCollectionExpression on " + _self + " result = " + mapCollectionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapCollectionExpression_mutation_tests(CollectionExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapCollectionExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapCollectionExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapCollectionExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapCollectionExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapCollectionExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapCollectionExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapCollectionExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapCollectionExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapCollectionExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapCollectionExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapCollectionExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapCollectionExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapCollectionExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapCollectionExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapCollectionExpression_mutation_tests_14(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapCollectionExpression mutants"); }
    }
  }



  public static void toLambdaList_mutation_tests_0(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        String vbl = "";

    try {
  String toLambdaList_result = _self.toLambdaList(vbl);
    System.out.println("Test 0 of toLambdaList on " + _self + " result = " + toLambdaList_result);

    } catch (Throwable _e) { }
 }



  public static void toLambdaList_mutation_tests_1(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        String vbl = " abc_XZ ";

    try {
  String toLambdaList_result = _self.toLambdaList(vbl);
    System.out.println("Test 1 of toLambdaList on " + _self + " result = " + toLambdaList_result);

    } catch (Throwable _e) { }
 }



  public static void toLambdaList_mutation_tests_2(CollectionExpression _self, int[] _counts, int[] _totals)
  {
        String vbl = "#�$* &~@':";

    try {
  String toLambdaList_result = _self.toLambdaList(vbl);
    System.out.println("Test 2 of toLambdaList on " + _self + " result = " + toLambdaList_result);

    } catch (Throwable _e) { }
 }



  public static void toLambdaList_mutation_tests(CollectionExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.toLambdaList_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toLambdaList_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toLambdaList_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toLambdaList mutants"); }
    }
  }



  public static void isMathFunction_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "";

    try {
  boolean isMathFunction_result = _self.isMathFunction(fname);
    System.out.println("Test 0 of isMathFunction on " + _self + " result = " + isMathFunction_result);

    } catch (Throwable _e) { }
 }



  public static void isMathFunction_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        String fname = " abc_XZ ";

    try {
  boolean isMathFunction_result = _self.isMathFunction(fname);
    System.out.println("Test 1 of isMathFunction on " + _self + " result = " + isMathFunction_result);

    } catch (Throwable _e) { }
 }



  public static void isMathFunction_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        String fname = "#�$* &~@':";

    try {
  boolean isMathFunction_result = _self.isMathFunction(fname);
    System.out.println("Test 2 of isMathFunction on " + _self + " result = " + isMathFunction_result);

    } catch (Throwable _e) { }
 }



  public static void isMathFunction_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.isMathFunction_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isMathFunction_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isMathFunction_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isMathFunction mutants"); }
    }
  }



  public static void noContextnoObject_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();

    try {
  boolean noContextnoObject_result = _self.noContextnoObject(obs);
    System.out.println("Test 0 of noContextnoObject on " + _self + " result = " + noContextnoObject_result);

    } catch (Throwable _e) { }
 }



  public static void noContextnoObject_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();

    try {
  boolean noContextnoObject_result = _self.noContextnoObject(obs);
    System.out.println("Test 1 of noContextnoObject on " + _self + " result = " + noContextnoObject_result);

    } catch (Throwable _e) { }
 }



  public static void noContextnoObject_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  boolean noContextnoObject_result = _self.noContextnoObject(obs);
    System.out.println("Test 2 of noContextnoObject on " + _self + " result = " + noContextnoObject_result);

    } catch (Throwable _e) { }
 }



  public static void noContextnoObject_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  boolean noContextnoObject_result = _self.noContextnoObject(obs);
    System.out.println("Test 3 of noContextnoObject on " + _self + " result = " + noContextnoObject_result);

    } catch (Throwable _e) { }
 }



  public static void noContextnoObject_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  boolean noContextnoObject_result = _self.noContextnoObject(obs);
    System.out.println("Test 4 of noContextnoObject on " + _self + " result = " + noContextnoObject_result);

    } catch (Throwable _e) { }
 }



  public static void noContextnoObject_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.noContextnoObject_mutation_tests_0(_self,_counts,_totals);

    MutationTest.noContextnoObject_mutation_tests_1(_self,_counts,_totals);

    MutationTest.noContextnoObject_mutation_tests_2(_self,_counts,_totals);

    MutationTest.noContextnoObject_mutation_tests_3(_self,_counts,_totals);

    MutationTest.noContextnoObject_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% noContextnoObject mutants"); }
    }
  }



  public static void contextAndObject_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();

    try {
  boolean contextAndObject_result = _self.contextAndObject(obs);
    System.out.println("Test 0 of contextAndObject on " + _self + " result = " + contextAndObject_result);

    } catch (Throwable _e) { }
 }



  public static void contextAndObject_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();

    try {
  boolean contextAndObject_result = _self.contextAndObject(obs);
    System.out.println("Test 1 of contextAndObject on " + _self + " result = " + contextAndObject_result);

    } catch (Throwable _e) { }
 }



  public static void contextAndObject_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  boolean contextAndObject_result = _self.contextAndObject(obs);
    System.out.println("Test 2 of contextAndObject on " + _self + " result = " + contextAndObject_result);

    } catch (Throwable _e) { }
 }



  public static void contextAndObject_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  boolean contextAndObject_result = _self.contextAndObject(obs);
    System.out.println("Test 3 of contextAndObject on " + _self + " result = " + contextAndObject_result);

    } catch (Throwable _e) { }
 }



  public static void contextAndObject_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  boolean contextAndObject_result = _self.contextAndObject(obs);
    System.out.println("Test 4 of contextAndObject on " + _self + " result = " + contextAndObject_result);

    } catch (Throwable _e) { }
 }



  public static void contextAndObject_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.contextAndObject_mutation_tests_0(_self,_counts,_totals);

    MutationTest.contextAndObject_mutation_tests_1(_self,_counts,_totals);

    MutationTest.contextAndObject_mutation_tests_2(_self,_counts,_totals);

    MutationTest.contextAndObject_mutation_tests_3(_self,_counts,_totals);

    MutationTest.contextAndObject_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% contextAndObject mutants"); }
    }
  }



  public static void isOclExceptionCreation_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();

    try {
  boolean isOclExceptionCreation_result = _self.isOclExceptionCreation(obs);
    System.out.println("Test 0 of isOclExceptionCreation on " + _self + " result = " + isOclExceptionCreation_result);

    } catch (Throwable _e) { }
 }



  public static void isOclExceptionCreation_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();

    try {
  boolean isOclExceptionCreation_result = _self.isOclExceptionCreation(obs);
    System.out.println("Test 1 of isOclExceptionCreation on " + _self + " result = " + isOclExceptionCreation_result);

    } catch (Throwable _e) { }
 }



  public static void isOclExceptionCreation_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  boolean isOclExceptionCreation_result = _self.isOclExceptionCreation(obs);
    System.out.println("Test 2 of isOclExceptionCreation on " + _self + " result = " + isOclExceptionCreation_result);

    } catch (Throwable _e) { }
 }



  public static void isOclExceptionCreation_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  boolean isOclExceptionCreation_result = _self.isOclExceptionCreation(obs);
    System.out.println("Test 3 of isOclExceptionCreation on " + _self + " result = " + isOclExceptionCreation_result);

    } catch (Throwable _e) { }
 }



  public static void isOclExceptionCreation_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  boolean isOclExceptionCreation_result = _self.isOclExceptionCreation(obs);
    System.out.println("Test 4 of isOclExceptionCreation on " + _self + " result = " + isOclExceptionCreation_result);

    } catch (Throwable _e) { }
 }



  public static void isOclExceptionCreation_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.isOclExceptionCreation_mutation_tests_0(_self,_counts,_totals);

    MutationTest.isOclExceptionCreation_mutation_tests_1(_self,_counts,_totals);

    MutationTest.isOclExceptionCreation_mutation_tests_2(_self,_counts,_totals);

    MutationTest.isOclExceptionCreation_mutation_tests_3(_self,_counts,_totals);

    MutationTest.isOclExceptionCreation_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% isOclExceptionCreation mutants"); }
    }
  }



  public static void mapTypeExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ainds = new Vector();

    try {
  String mapTypeExpression_result = _self.mapTypeExpression(ainds);
    System.out.println("Test 0 of mapTypeExpression on " + _self + " result = " + mapTypeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapTypeExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ainds = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapTypeExpression_result = _self.mapTypeExpression(ainds);
    System.out.println("Test 1 of mapTypeExpression on " + _self + " result = " + mapTypeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapTypeExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ainds = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapTypeExpression_result = _self.mapTypeExpression(ainds);
    System.out.println("Test 2 of mapTypeExpression on " + _self + " result = " + mapTypeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapTypeExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ainds = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapTypeExpression_result = _self.mapTypeExpression(ainds);
    System.out.println("Test 3 of mapTypeExpression on " + _self + " result = " + mapTypeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapTypeExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ainds = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapTypeExpression_result = _self.mapTypeExpression(ainds);
    System.out.println("Test 4 of mapTypeExpression on " + _self + " result = " + mapTypeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapTypeExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapTypeExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapTypeExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapTypeExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapTypeExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapTypeExpression_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapTypeExpression mutants"); }
    }
  }



  public static void mapValueExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List aind = new Vector();

    try {
  String mapValueExpression_result = _self.mapValueExpression(aind);
    System.out.println("Test 0 of mapValueExpression on " + _self + " result = " + mapValueExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapValueExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List aind = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapValueExpression_result = _self.mapValueExpression(aind);
    System.out.println("Test 1 of mapValueExpression on " + _self + " result = " + mapValueExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapValueExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapValueExpression_result = _self.mapValueExpression(aind);
    System.out.println("Test 2 of mapValueExpression on " + _self + " result = " + mapValueExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapValueExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapValueExpression_result = _self.mapValueExpression(aind);
    System.out.println("Test 3 of mapValueExpression on " + _self + " result = " + mapValueExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapValueExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapValueExpression_result = _self.mapValueExpression(aind);
    System.out.println("Test 4 of mapValueExpression on " + _self + " result = " + mapValueExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapValueExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapValueExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapValueExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapValueExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapValueExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapValueExpression_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapValueExpression mutants"); }
    }
  }



  public static void mapVariableExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 0 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 1 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 2 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 3 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 4 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 5 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 6 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 7 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 8 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 9 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 10 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 11 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 12 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 13 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 14 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 15 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 16 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 17 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 18 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 19 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 20 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 21 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 22 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 23 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 24 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 25 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 26 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 27 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 28 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 29 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 30 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 31 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 32 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 33 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 34 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 35 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 36 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 37 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 38 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 39 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 40 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 41 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 42 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 43 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 44 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 45 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 46 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 47 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 48 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 49 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 50 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 51 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 52 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 53 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 54 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 55 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 56 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 57 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 58 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 59 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 60 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 61 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 62 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 63 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 64 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 65 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 66 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 67 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 68 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 69 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 70 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 71 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 72 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 73 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 74 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 75 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 76 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 77 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 78 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 79 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 80 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 81 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 82 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 83 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 84 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 85 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 86 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 87 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 88 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 89 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 90 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 91 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 92 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 93 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 94 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 95 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 96 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 97 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 98 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapVariableExpression_result = _self.mapVariableExpression(obs,aind,pars);
    System.out.println("Test 99 of mapVariableExpression on " + _self + " result = " + mapVariableExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapVariableExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapVariableExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapVariableExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapVariableExpression mutants"); }
    }
  }



  public static void mapStaticAttributeExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 0 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 1 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 2 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 3 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 4 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 5 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 6 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 7 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 8 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 9 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 10 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 11 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 12 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 13 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 14 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 15 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 16 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 17 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 18 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 19 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 20 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 21 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 22 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 23 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 24 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 25 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 26 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 27 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 28 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 29 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 30 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 31 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 32 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 33 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 34 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 35 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 36 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 37 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 38 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 39 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 40 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 41 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 42 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 43 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 44 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 45 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 46 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 47 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 48 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 49 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 50 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 51 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 52 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 53 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 54 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 55 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 56 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 57 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 58 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 59 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 60 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 61 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 62 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 63 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 64 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 65 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 66 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 67 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 68 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 69 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 70 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 71 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 72 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 73 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 74 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 75 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 76 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 77 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 78 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 79 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 80 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 81 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 82 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 83 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 84 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 85 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 86 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 87 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 88 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 89 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 90 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 91 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 92 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 93 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 94 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 95 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 96 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 97 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 98 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticAttributeExpression_result = _self.mapStaticAttributeExpression(obs,aind,pars);
    System.out.println("Test 99 of mapStaticAttributeExpression on " + _self + " result = " + mapStaticAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticAttributeExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapStaticAttributeExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapStaticAttributeExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapStaticAttributeExpression mutants"); }
    }
  }



  public static void mapReferencedAttributeExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 0 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 1 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 2 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 3 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 4 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 5 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 6 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 7 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 8 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 9 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 10 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 11 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 12 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 13 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 14 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 15 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 16 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 17 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 18 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 19 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 20 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 21 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 22 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 23 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 24 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 25 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 26 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 27 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 28 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 29 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 30 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 31 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 32 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 33 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 34 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 35 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 36 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 37 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 38 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 39 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 40 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 41 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 42 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 43 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 44 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 45 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 46 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 47 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 48 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 49 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 50 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 51 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 52 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 53 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 54 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 55 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 56 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 57 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 58 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 59 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 60 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 61 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 62 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 63 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 64 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 65 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 66 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 67 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 68 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 69 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 70 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 71 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 72 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 73 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 74 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 75 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 76 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 77 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 78 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 79 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 80 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 81 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 82 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 83 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 84 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 85 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 86 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 87 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 88 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 89 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 90 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 91 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 92 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 93 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 94 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 95 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 96 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 97 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 98 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapReferencedAttributeExpression_result = _self.mapReferencedAttributeExpression(obs,aind,pars);
    System.out.println("Test 99 of mapReferencedAttributeExpression on " + _self + " result = " + mapReferencedAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapReferencedAttributeExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapReferencedAttributeExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapReferencedAttributeExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapReferencedAttributeExpression mutants"); }
    }
  }



  public static void mapAttributeExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 0 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 1 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 2 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 3 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 4 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 5 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 6 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 7 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 8 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 9 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 10 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 11 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 12 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 13 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 14 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 15 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 16 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 17 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 18 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 19 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 20 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 21 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 22 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 23 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 24 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 25 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 26 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 27 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 28 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 29 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 30 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 31 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 32 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 33 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 34 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 35 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 36 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 37 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 38 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 39 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 40 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 41 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 42 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 43 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 44 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 45 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 46 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 47 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 48 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 49 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 50 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 51 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 52 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 53 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 54 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 55 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 56 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 57 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 58 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 59 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 60 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 61 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 62 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 63 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 64 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 65 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 66 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 67 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 68 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 69 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 70 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 71 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 72 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 73 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 74 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 75 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 76 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 77 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 78 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 79 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 80 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 81 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 82 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 83 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 84 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 85 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 86 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 87 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 88 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 89 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 90 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 91 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 92 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 93 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 94 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 95 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 96 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 97 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 98 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapAttributeExpression_result = _self.mapAttributeExpression(obs,aind,pars);
    System.out.println("Test 99 of mapAttributeExpression on " + _self + " result = " + mapAttributeExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapAttributeExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapAttributeExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapAttributeExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapAttributeExpression mutants"); }
    }
  }



  public static void mapErrorCall_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List pars = new Vector();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 0 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 1 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 2 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 3 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 4 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 5 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 6 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 7 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 8 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 9 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 10 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 11 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 12 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 13 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 14 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 15 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 16 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 17 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 18 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 19 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 20 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 21 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 22 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 23 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapErrorCall_result = _self.mapErrorCall(obs,pars);
    System.out.println("Test 24 of mapErrorCall on " + _self + " result = " + mapErrorCall_result);

    } catch (Throwable _e) { }
 }



  public static void mapErrorCall_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapErrorCall_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapErrorCall_mutation_tests_24(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapErrorCall mutants"); }
    }
  }



  public static void mapStaticOperationExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 0 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 1 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 2 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 3 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 4 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 5 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 6 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 7 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 8 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 9 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 10 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 11 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 12 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 13 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 14 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 15 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 16 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 17 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 18 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 19 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 20 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 21 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 22 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 23 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 24 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 25 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 26 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 27 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 28 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 29 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 30 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 31 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 32 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 33 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 34 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 35 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 36 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 37 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 38 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 39 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 40 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 41 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 42 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 43 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 44 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 45 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 46 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 47 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 48 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 49 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 50 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 51 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 52 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 53 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 54 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 55 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 56 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 57 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 58 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 59 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 60 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 61 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 62 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 63 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 64 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 65 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 66 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 67 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 68 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 69 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 70 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 71 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 72 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 73 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 74 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 75 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 76 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 77 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 78 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 79 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 80 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 81 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 82 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 83 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 84 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 85 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 86 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 87 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 88 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 89 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 90 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 91 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 92 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 93 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 94 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 95 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 96 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 97 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 98 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapStaticOperationExpression_result = _self.mapStaticOperationExpression(obs,aind,pars);
    System.out.println("Test 99 of mapStaticOperationExpression on " + _self + " result = " + mapStaticOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapStaticOperationExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapStaticOperationExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapStaticOperationExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapStaticOperationExpression mutants"); }
    }
  }



  public static void mapInstanceOperationExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 0 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 1 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 2 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 3 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 4 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 5 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 6 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 7 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 8 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 9 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 10 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 11 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 12 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 13 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 14 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 15 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 16 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 17 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 18 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 19 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 20 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 21 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 22 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 23 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 24 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 25 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 26 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 27 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 28 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 29 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 30 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 31 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 32 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 33 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 34 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 35 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 36 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 37 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 38 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 39 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 40 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 41 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 42 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 43 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 44 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 45 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 46 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 47 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 48 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 49 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 50 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 51 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 52 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 53 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 54 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 55 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 56 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 57 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 58 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 59 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 60 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 61 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 62 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 63 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 64 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 65 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 66 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 67 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 68 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 69 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 70 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 71 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 72 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 73 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 74 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 75 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 76 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 77 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 78 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 79 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 80 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 81 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 82 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 83 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 84 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 85 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 86 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 87 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 88 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 89 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 90 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 91 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 92 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 93 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 94 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 95 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 96 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 97 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 98 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInstanceOperationExpression_result = _self.mapInstanceOperationExpression(obs,aind,pars);
    System.out.println("Test 99 of mapInstanceOperationExpression on " + _self + " result = " + mapInstanceOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInstanceOperationExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapInstanceOperationExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapInstanceOperationExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapInstanceOperationExpression mutants"); }
    }
  }



  public static void mapOperationExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 0 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 1 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 2 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 3 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 4 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 5 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 6 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 7 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 8 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 9 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 10 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 11 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 12 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 13 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 14 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 15 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 16 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 17 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 18 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 19 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 20 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 21 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 22 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 23 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 24 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 25 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 26 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 27 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 28 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 29 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 30 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 31 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 32 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 33 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 34 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 35 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 36 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 37 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 38 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 39 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 40 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 41 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 42 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 43 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 44 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 45 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 46 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 47 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 48 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 49 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 50 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 51 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 52 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 53 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 54 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 55 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 56 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 57 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 58 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 59 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 60 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 61 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 62 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 63 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 64 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 65 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 66 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 67 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 68 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 69 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 70 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 71 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 72 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 73 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 74 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 75 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 76 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 77 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 78 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 79 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 80 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 81 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 82 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 83 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 84 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 85 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 86 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 87 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 88 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 89 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 90 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 91 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 92 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 93 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 94 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 95 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 96 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 97 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 98 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapOperationExpression_result = _self.mapOperationExpression(obs,aind,pars);
    System.out.println("Test 99 of mapOperationExpression on " + _self + " result = " + mapOperationExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapOperationExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapOperationExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapOperationExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapOperationExpression mutants"); }
    }
  }



  public static void mapIntegerFunctionExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 0 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 1 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 2 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 3 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 4 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 5 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 6 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 7 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 8 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 9 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 10 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 11 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 12 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 13 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 14 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 15 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 16 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 17 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 18 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 19 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 20 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 21 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 22 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 23 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 24 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 25 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 26 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 27 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 28 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 29 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 30 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 31 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 32 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 33 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 34 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 35 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 36 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 37 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 38 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 39 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 40 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 41 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 42 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 43 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 44 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 45 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 46 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 47 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 48 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 49 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 50 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 51 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 52 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 53 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 54 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 55 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 56 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 57 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 58 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 59 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 60 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 61 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 62 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 63 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 64 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 65 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 66 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 67 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 68 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 69 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 70 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 71 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 72 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 73 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 74 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 75 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 76 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 77 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 78 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 79 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 80 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 81 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 82 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 83 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 84 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 85 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 86 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 87 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 88 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 89 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 90 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 91 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 92 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 93 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 94 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 95 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 96 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 97 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 98 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapIntegerFunctionExpression_result = _self.mapIntegerFunctionExpression(obs,aind,pars);
    System.out.println("Test 99 of mapIntegerFunctionExpression on " + _self + " result = " + mapIntegerFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapIntegerFunctionExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapIntegerFunctionExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapIntegerFunctionExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapIntegerFunctionExpression mutants"); }
    }
  }



  public static void mapInsertAtFunctionExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 0 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 1 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 2 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 3 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 4 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 5 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 6 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 7 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 8 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 9 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 10 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 11 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 12 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 13 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 14 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 15 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 16 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 17 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 18 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 19 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 20 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 21 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 22 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 23 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 24 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 25 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 26 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 27 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 28 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 29 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 30 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 31 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 32 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 33 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 34 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 35 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 36 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 37 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 38 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 39 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 40 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 41 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 42 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 43 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 44 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 45 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 46 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 47 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 48 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 49 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 50 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 51 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 52 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 53 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 54 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 55 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 56 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 57 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 58 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 59 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 60 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 61 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 62 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 63 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 64 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 65 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 66 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 67 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 68 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 69 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 70 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 71 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 72 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 73 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 74 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 75 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 76 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 77 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 78 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 79 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 80 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 81 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 82 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 83 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 84 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 85 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 86 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 87 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 88 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 89 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 90 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 91 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 92 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 93 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 94 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 95 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 96 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 97 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 98 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapInsertAtFunctionExpression_result = _self.mapInsertAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 99 of mapInsertAtFunctionExpression on " + _self + " result = " + mapInsertAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapInsertAtFunctionExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapInsertAtFunctionExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapInsertAtFunctionExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapInsertAtFunctionExpression mutants"); }
    }
  }



  public static void mapSetAtFunctionExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 0 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 1 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 2 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 3 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 4 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 5 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 6 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 7 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 8 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 9 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 10 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 11 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 12 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 13 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 14 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 15 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 16 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 17 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 18 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 19 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 20 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 21 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 22 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 23 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 24 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 25 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 26 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 27 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 28 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 29 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 30 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 31 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 32 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 33 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 34 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 35 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 36 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 37 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 38 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 39 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 40 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 41 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 42 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 43 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 44 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 45 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 46 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 47 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 48 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 49 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 50 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 51 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 52 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 53 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 54 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 55 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 56 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 57 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 58 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 59 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 60 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 61 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 62 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 63 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 64 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 65 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 66 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 67 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 68 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 69 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 70 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 71 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 72 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 73 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 74 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 75 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 76 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 77 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 78 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 79 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 80 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 81 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 82 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 83 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 84 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 85 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 86 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 87 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 88 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 89 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 90 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 91 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 92 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 93 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 94 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 95 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 96 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 97 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 98 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSetAtFunctionExpression_result = _self.mapSetAtFunctionExpression(obs,aind,pars);
    System.out.println("Test 99 of mapSetAtFunctionExpression on " + _self + " result = " + mapSetAtFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSetAtFunctionExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapSetAtFunctionExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapSetAtFunctionExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapSetAtFunctionExpression mutants"); }
    }
  }



  public static void mapSubrangeFunctionExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 0 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 1 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 2 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 3 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 4 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 5 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 6 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 7 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 8 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 9 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 10 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 11 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 12 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 13 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 14 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 15 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 16 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 17 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 18 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 19 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 20 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 21 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 22 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 23 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 24 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 25 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 26 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 27 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 28 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 29 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 30 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 31 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 32 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 33 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 34 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 35 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 36 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 37 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 38 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 39 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 40 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 41 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 42 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 43 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 44 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 45 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 46 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 47 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 48 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 49 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 50 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 51 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 52 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 53 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 54 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 55 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 56 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 57 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 58 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 59 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 60 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 61 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 62 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 63 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 64 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 65 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 66 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 67 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 68 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 69 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 70 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 71 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 72 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 73 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 74 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 75 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 76 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 77 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 78 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 79 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 80 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 81 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 82 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 83 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 84 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 85 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 86 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 87 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 88 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 89 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 90 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 91 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 92 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 93 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 94 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 95 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 96 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 97 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 98 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapSubrangeFunctionExpression_result = _self.mapSubrangeFunctionExpression(obs,aind,pars);
    System.out.println("Test 99 of mapSubrangeFunctionExpression on " + _self + " result = " + mapSubrangeFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapSubrangeFunctionExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapSubrangeFunctionExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapSubrangeFunctionExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapSubrangeFunctionExpression mutants"); }
    }
  }



  public static void mapFunctionExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 0 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 1 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 2 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 3 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 4 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 5 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 6 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 7 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 8 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 9 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 10 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 11 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 12 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 13 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 14 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 15 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 16 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 17 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 18 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 19 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 20 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 21 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 22 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 23 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 24 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 25 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 26 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 27 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 28 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 29 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 30 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 31 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 32 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 33 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 34 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 35 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 36 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 37 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 38 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 39 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 40 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 41 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 42 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 43 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 44 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 45 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 46 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 47 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 48 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 49 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 50 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 51 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 52 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 53 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 54 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 55 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 56 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 57 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 58 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 59 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 60 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 61 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 62 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 63 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 64 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 65 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 66 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 67 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 68 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 69 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 70 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 71 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 72 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 73 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 74 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 75 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 76 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 77 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 78 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 79 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 80 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 81 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 82 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 83 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 84 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 85 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 86 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 87 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 88 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 89 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 90 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 91 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 92 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 93 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 94 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 95 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 96 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 97 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 98 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapFunctionExpression_result = _self.mapFunctionExpression(obs,aind,pars);
    System.out.println("Test 99 of mapFunctionExpression on " + _self + " result = " + mapFunctionExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapFunctionExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapFunctionExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapFunctionExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapFunctionExpression mutants"); }
    }
  }



  public static void mapClassArrayExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 0 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 1 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 2 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 3 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 4 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 5 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 6 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 7 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 8 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 9 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 10 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 11 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 12 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 13 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 14 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 15 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 16 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 17 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 18 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 19 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 20 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 21 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 22 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 23 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 24 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 25 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 26 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 27 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 28 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 29 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 30 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 31 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 32 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 33 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 34 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 35 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 36 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 37 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 38 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 39 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 40 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 41 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 42 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 43 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 44 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 45 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 46 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 47 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 48 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 49 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 50 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 51 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 52 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 53 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 54 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 55 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 56 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 57 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 58 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 59 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 60 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 61 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 62 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 63 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 64 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 65 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 66 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 67 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 68 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 69 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 70 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 71 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 72 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 73 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 74 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 75 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 76 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 77 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 78 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 79 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 80 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 81 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 82 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 83 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 84 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 85 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 86 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 87 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 88 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 89 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 90 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 91 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 92 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 93 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 94 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 95 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 96 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 97 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 98 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassArrayExpression_result = _self.mapClassArrayExpression(obs,aind,pars);
    System.out.println("Test 99 of mapClassArrayExpression on " + _self + " result = " + mapClassArrayExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassArrayExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapClassArrayExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapClassArrayExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapClassArrayExpression mutants"); }
    }
  }



  public static void mapClassExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 0 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 1 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 2 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 3 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 4 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 5 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 6 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 7 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 8 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 9 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 10 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 11 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 12 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 13 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 14 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 15 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 16 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 17 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 18 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 19 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 20 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 21 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 22 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 23 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 24 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 25 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 26 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 27 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 28 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 29 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 30 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 31 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 32 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 33 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 34 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 35 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 36 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 37 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 38 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 39 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 40 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 41 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 42 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 43 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 44 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 45 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 46 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 47 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 48 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 49 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 50 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 51 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 52 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 53 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 54 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 55 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 56 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 57 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 58 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 59 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 60 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 61 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 62 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 63 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 64 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 65 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 66 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 67 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 68 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 69 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 70 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 71 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 72 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 73 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 74 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 75 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 76 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 77 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 78 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 79 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 80 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 81 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 82 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 83 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 84 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 85 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 86 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 87 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 88 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 89 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 90 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 91 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 92 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 93 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 94 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 95 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 96 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 97 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 98 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List obs = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapClassExpression_result = _self.mapClassExpression(obs,aind,pars);
    System.out.println("Test 99 of mapClassExpression on " + _self + " result = " + mapClassExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapClassExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapClassExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapClassExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapClassExpression mutants"); }
    }
  }



  public static void mapBasicExpression_mutation_tests_0(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 0 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_1(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 1 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_2(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 2 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_3(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 3 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_4(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 4 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_5(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 5 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_6(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 6 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_7(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 7 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_8(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 8 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_9(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 9 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_10(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 10 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_11(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 11 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_12(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 12 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_13(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 13 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_14(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 14 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_15(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 15 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_16(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 16 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_17(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 17 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_18(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 18 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_19(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 19 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_20(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 20 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_21(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 21 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_22(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 22 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_23(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 23 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_24(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = new Vector();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 24 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_25(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 25 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_26(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 26 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_27(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 27 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_28(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 28 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_29(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 29 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_30(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 30 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_31(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 31 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_32(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 32 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_33(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 33 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_34(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 34 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_35(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 35 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_36(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 36 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_37(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 37 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_38(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 38 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_39(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 39 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_40(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 40 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_41(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 41 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_42(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 42 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_43(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 43 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_44(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 44 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_45(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 45 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_46(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 46 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_47(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 47 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_48(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 48 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_49(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 49 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_50(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 50 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_51(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 51 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_52(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 52 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_53(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 53 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_54(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 54 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_55(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 55 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_56(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 56 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_57(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 57 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_58(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 58 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_59(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 59 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_60(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 60 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_61(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 61 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_62(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 62 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_63(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 63 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_64(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 64 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_65(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 65 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_66(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 66 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_67(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 67 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_68(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 68 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_69(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 69 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_70(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 70 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_71(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 71 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_72(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 72 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_73(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 73 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_74(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 74 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_75(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 75 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_76(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 76 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_77(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 77 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_78(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 78 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_79(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = new Vector();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 79 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_80(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 80 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_81(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 81 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_82(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 82 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_83(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 83 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_84(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 84 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_85(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 85 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_86(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 86 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_87(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 87 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_88(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 88 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_89(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add(" abc_XZ ").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 89 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_90(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 90 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_91(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 91 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_92(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 92 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_93(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 93 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_94(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 94 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_95(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = new Vector();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 95 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_96(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 96 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_97(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add(" abc_XZ ").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 97 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_98(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 98 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests_99(BasicExpression _self, int[] _counts, int[] _totals)
  {
        List ob = (new SystemTypes.Set()).add("#�$* &~@':").getElements();
    List aind = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();
    List pars = (new SystemTypes.Set()).add("").add(" abc_XZ ").add("#�$* &~@':").getElements();

    try {
  String mapBasicExpression_result = _self.mapBasicExpression(ob,aind,pars);
    System.out.println("Test 99 of mapBasicExpression on " + _self + " result = " + mapBasicExpression_result);

    } catch (Throwable _e) { }
 }



  public static void mapBasicExpression_mutation_tests(BasicExpression _self, int[] _counts, int[] _totals)
  {     MutationTest.mapBasicExpression_mutation_tests_0(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_1(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_2(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_3(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_4(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_5(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_6(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_7(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_8(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_9(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_10(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_11(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_12(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_13(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_14(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_15(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_16(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_17(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_18(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_19(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_20(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_21(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_22(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_23(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_24(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_25(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_26(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_27(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_28(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_29(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_30(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_31(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_32(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_33(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_34(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_35(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_36(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_37(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_38(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_39(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_40(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_41(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_42(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_43(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_44(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_45(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_46(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_47(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_48(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_49(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_50(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_51(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_52(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_53(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_54(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_55(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_56(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_57(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_58(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_59(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_60(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_61(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_62(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_63(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_64(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_65(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_66(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_67(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_68(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_69(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_70(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_71(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_72(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_73(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_74(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_75(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_76(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_77(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_78(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_79(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_80(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_81(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_82(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_83(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_84(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_85(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_86(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_87(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_88(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_89(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_90(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_91(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_92(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_93(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_94(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_95(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_96(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_97(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_98(_self,_counts,_totals);

    MutationTest.mapBasicExpression_mutation_tests_99(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% mapBasicExpression mutants"); }
    }
  }



  public static void getPKOp_mutation_tests_0(Property _self, int[] _counts, int[] _totals)
  {
        String ent = "";

    try {
  String getPKOp_result = _self.getPKOp(ent);
    System.out.println("Test 0 of getPKOp on " + _self + " result = " + getPKOp_result);

    } catch (Throwable _e) { }
 }



  public static void getPKOp_mutation_tests_1(Property _self, int[] _counts, int[] _totals)
  {
        String ent = " abc_XZ ";

    try {
  String getPKOp_result = _self.getPKOp(ent);
    System.out.println("Test 1 of getPKOp on " + _self + " result = " + getPKOp_result);

    } catch (Throwable _e) { }
 }



  public static void getPKOp_mutation_tests_2(Property _self, int[] _counts, int[] _totals)
  {
        String ent = "#�$* &~@':";

    try {
  String getPKOp_result = _self.getPKOp(ent);
    System.out.println("Test 2 of getPKOp on " + _self + " result = " + getPKOp_result);

    } catch (Throwable _e) { }
 }



  public static void getPKOp_mutation_tests(Property _self, int[] _counts, int[] _totals)
  {     MutationTest.getPKOp_mutation_tests_0(_self,_counts,_totals);

    MutationTest.getPKOp_mutation_tests_1(_self,_counts,_totals);

    MutationTest.getPKOp_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% getPKOp mutants"); }
    }
  }



  public static void getPKOps_mutation_tests_0(Property _self, int[] _counts, int[] _totals)
  {
        String ent = "";

    try {
  String getPKOps_result = _self.getPKOps(ent);
    System.out.println("Test 0 of getPKOps on " + _self + " result = " + getPKOps_result);

    } catch (Throwable _e) { }
 }



  public static void getPKOps_mutation_tests_1(Property _self, int[] _counts, int[] _totals)
  {
        String ent = " abc_XZ ";

    try {
  String getPKOps_result = _self.getPKOps(ent);
    System.out.println("Test 1 of getPKOps on " + _self + " result = " + getPKOps_result);

    } catch (Throwable _e) { }
 }



  public static void getPKOps_mutation_tests_2(Property _self, int[] _counts, int[] _totals)
  {
        String ent = "#�$* &~@':";

    try {
  String getPKOps_result = _self.getPKOps(ent);
    System.out.println("Test 2 of getPKOps on " + _self + " result = " + getPKOps_result);

    } catch (Throwable _e) { }
 }



  public static void getPKOps_mutation_tests(Property _self, int[] _counts, int[] _totals)
  {     MutationTest.getPKOps_mutation_tests_0(_self,_counts,_totals);

    MutationTest.getPKOps_mutation_tests_1(_self,_counts,_totals);

    MutationTest.getPKOps_mutation_tests_2(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% getPKOps mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(ReturnStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(ReturnStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(ReturnStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(ReturnStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(ReturnStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(ReturnStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(AssertStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(AssertStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(AssertStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(AssertStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(AssertStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(AssertStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(ErrorStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(ErrorStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(ErrorStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(ErrorStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(ErrorStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(ErrorStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(CatchStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(CatchStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(CatchStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(CatchStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(CatchStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(CatchStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(FinalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(FinalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(FinalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(FinalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(FinalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(FinalStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(BreakStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(BreakStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(BreakStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(BreakStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(BreakStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(BreakStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(ContinueStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(ContinueStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(ContinueStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(ContinueStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(ContinueStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(ContinueStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(OperationCallStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(OperationCallStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(OperationCallStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(OperationCallStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(OperationCallStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(OperationCallStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(ImplicitCallStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(ImplicitCallStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(ImplicitCallStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(ImplicitCallStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(ImplicitCallStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(ImplicitCallStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(BoundedLoopStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(BoundedLoopStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(BoundedLoopStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(BoundedLoopStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(BoundedLoopStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(BoundedLoopStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(UnboundedLoopStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(UnboundedLoopStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(UnboundedLoopStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(UnboundedLoopStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(UnboundedLoopStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(UnboundedLoopStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(AssignStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(AssignStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(AssignStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(AssignStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(AssignStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(AssignStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(SequenceStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(SequenceStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(SequenceStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(SequenceStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(SequenceStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(SequenceStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(TryStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(TryStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(TryStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(TryStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(TryStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(TryStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void elsecode_mutation_tests_0(ConditionalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String elsecode_result = _self.elsecode(indent);
    System.out.println("Test 0 of elsecode on " + _self + " result = " + elsecode_result);

    } catch (Throwable _e) { }
 }



  public static void elsecode_mutation_tests_1(ConditionalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String elsecode_result = _self.elsecode(indent);
    System.out.println("Test 1 of elsecode on " + _self + " result = " + elsecode_result);

    } catch (Throwable _e) { }
 }



  public static void elsecode_mutation_tests_2(ConditionalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String elsecode_result = _self.elsecode(indent);
    System.out.println("Test 2 of elsecode on " + _self + " result = " + elsecode_result);

    } catch (Throwable _e) { }
 }



  public static void elsecode_mutation_tests_3(ConditionalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String elsecode_result = _self.elsecode(indent);
    System.out.println("Test 3 of elsecode on " + _self + " result = " + elsecode_result);

    } catch (Throwable _e) { }
 }



  public static void elsecode_mutation_tests_4(ConditionalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String elsecode_result = _self.elsecode(indent);
    System.out.println("Test 4 of elsecode on " + _self + " result = " + elsecode_result);

    } catch (Throwable _e) { }
 }



  public static void elsecode_mutation_tests(ConditionalStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.elsecode_mutation_tests_0(_self,_counts,_totals);

    MutationTest.elsecode_mutation_tests_1(_self,_counts,_totals);

    MutationTest.elsecode_mutation_tests_2(_self,_counts,_totals);

    MutationTest.elsecode_mutation_tests_3(_self,_counts,_totals);

    MutationTest.elsecode_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% elsecode mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(ConditionalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(ConditionalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(ConditionalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(ConditionalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(ConditionalStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(ConditionalStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



  public static void toPython_mutation_tests_0(CreationStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 0;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 0 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_1(CreationStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 1 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_2(CreationStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 2 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_3(CreationStatement _self, int[] _counts, int[] _totals)
  {
        int indent = 1024;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 3 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests_4(CreationStatement _self, int[] _counts, int[] _totals)
  {
        int indent = -1025;

    try {
  String toPython_result = _self.toPython(indent);
    System.out.println("Test 4 of toPython on " + _self + " result = " + toPython_result);

    } catch (Throwable _e) { }
 }



  public static void toPython_mutation_tests(CreationStatement _self, int[] _counts, int[] _totals)
  {     MutationTest.toPython_mutation_tests_0(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_1(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_2(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_3(_self,_counts,_totals);

    MutationTest.toPython_mutation_tests_4(_self,_counts,_totals);


    for (int i = 0; i < _counts.length; i++)
    { if (_totals[i] > 0)
      { summaryOut.println("Test " + i + " detects " + (100.0*_counts[i])/_totals[i] + "% toPython mutants"); }
    }
  }



}
