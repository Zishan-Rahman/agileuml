package matrixlib { 


class MatrixLib { 

  static query rowMult(s : Sequence(double), m : Sequence(Sequence(double))) : Sequence(double)  
  pre: true 
  post: result = Integer.subrange(1, s.size)->collect( i | Integer.Sum(1, m.size, k, s[k]*(m[k]->at(i))));

   static query matrixMultiplication(m1: Sequence(Sequence(double)), m2 : Sequence(Sequence(double))) : Sequence(Sequence(double))
   pre: true
   post: result = m1->collect( row | MathLib.rowMult(row, m2) );

  static query subRows(m : Sequence(OclAny), s : Sequence(int)) : Sequence(OclAny) 
  pre: true
  post: result = s->select( i | 1 <= i & i <= m->size() )->collect( j | m->at(j) );

  static query subMatrix(m : Sequence(Sequence(OclAny)), rows : Sequence(int), cols : Sequence(int)) : Sequence(Sequence(OclAny)) 
  pre: true
  post: result = rows->select( i | 1 <= i & i <= m->size() )->collect( j | MatrixLib.subRows(m->at(j), cols) );

  static query matrixExcludingRowColumn(m : Sequence(Sequence(OclAny)), row : int, col : int) : Sequence(Sequence(OclAny)) 
  pre: true
  post: true
  activity: 
    var res : Sequence(Sequence(OclAny)) := Sequence{}; 
    for i : Integer.subrange(1,m->size()
    do
      (if i /= row 
       then 
         var r : Sequence(OclAny) := m->at(i);
         var subrow : Sequence(OclAny) :=  
           Integer.subrange(1,r->size())->select( j | j /= col )->collect( j | r->at(j));
         res := res->append(subrow)
       else skip);
    return res;  

 static query column(m : Sequence(OclAny), i : int) : Sequence(OclAny)
 pre: true 
 post: 
   (m->at(1)->oclIsTypeOf(Sequence) => 
      result = m->collect( r | r->oclAsType(Sequence)->at(i) )) & 
   (true => result = m->at(i)); 

 static query shape(x : OclAny) : Sequence(int)
 pre: true
 post: true
 activity: 
    var res : Sequence(int) := Sequence{} ; 
    if x->oclIsTypeOf(Sequence)
    then 
      var sq : Sequence(OclAny) := x->oclAsType(Sequence) ; 
      res := Sequence{ sq->size() } ; 
      if sq->size() > 0 
      then 
        res := res->union(MatrixLib.shape(sq->at(1)))
      else 
        return res
    else 
      return res ; 
    return res;

  static operation singleValueMatrix(sh : Sequence(int), x : double) : Sequence(OclAny)
  pre: true 
  post: true
  activity: 
    if sh->size() = 0 
    then 
      return Sequence{}
    else skip ; 

    if sh->size() = 1 
    then 
      return Integer.subrange(1,sh->at(1))->collect(x)
    else skip ; 
      
    var res : Sequence(OclAny) ; 
    res := Integer.subrange(1,sh->at(1))->collect(MatrixLib.singleValueMatrix(sh->tail(), x)) ; 
    return res; 

  static operation fillMatrixFrom(sq : Sequence(double), sh : Sequence(int)) : Sequence(OclAny)
  pre: true 
  post: true
  activity: 
    if sh->size() = 0 
    then 
      return Sequence{}
    else skip ; 

    if sh->size() = 1 
    then 
      return sq.subrange(1,sh->at(1))
    else skip ; 
      
    var res : Sequence(OclAny) := Sequence{} ; 
    var prod : int := sh->tail()->prd() ; 

    for i : Integer.subrange(1,sh->at(1))
    do 
      (var rowi : Sequence(double) := 
         MatrixLib.fillMatrixFrom(sq.subrange(1 + prod*(i-1), prod*i), sh->tail()) ; 
       res := res->append(rowi) ) ;
 
    return res; 

  static query identityMatrix(n : int) : Sequence(Sequence(double))
  pre: true 
  post: 
    result = Integer.subrange(1,n)->collect( i | Integer.subrange(1,n)->collect( j | if i = j then 1.0 else 0.0 endif ) ); 

  static query flattenMatrix(m : Sequence(OclAny)) : Sequence(double) 
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return MatrixLib.flattenMatrix(m->at(1))->union(MatrixLib.flattenMatrix(m->tail()))
    else 
      return m; 

  static query sumMatrix(m : Sequence(OclAny)) : double 
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return 0.0
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return MatrixLib.sumMatrix(m->at(1)) + (MatrixLib.sumMatrix(m->tail()))
    else 
      return m->sum(); 

  static query prdMatrix(m : Sequence(OclAny)) : double 
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return 1.0
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return MatrixLib.prdMatrix(m->at(1))*(MatrixLib.prdMatrix(m->tail()))
    else 
      return m->prd(); 

   static operation elementwiseApply(m : Sequence(OclAny), f : Function(double,double)) : Sequence(OclAny)
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
                  MatrixLib.elementwiseApply(_r,f))
    else 
      skip;

    return m->collect( _elem | f->apply(_elem->oclAsType(double)));
 

   static operation elementwiseMult(m : Sequence(OclAny), x : double) : Sequence(OclAny)
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
                  MatrixLib.elementwiseMult(_r, x))
    else 
      skip;

    return m->collect( _elem | (_elem->oclAsType(double))*x )

   static operation elementwiseDivide(m : Sequence(OclAny), x : double) : Sequence(OclAny)
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
                  MatrixLib.elementwiseDivide(_r, x))
    else 
      skip;

   static operation elementwiseLess(m : Sequence(OclAny), x : double) : Sequence(OclAny)
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
                  MatrixLib.elementwiseLess(_r, x))
    else 
      skip;

    return m->collect( _elem | if (_elem->oclAsType(double)) < x then true else false endif )

   static operation elementwiseGreater(m : Sequence(OclAny), x : double) : Sequence(OclAny)
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
                  MatrixLib.elementwiseGreater(_r, x))
    else 
      skip;

    return m->collect( _elem | if (_elem->oclAsType(double)) > x then true else false endif )


   static operation elementwiseEqual(m : Sequence(OclAny), x : double) : Sequence(OclAny)
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
                  MatrixLib.elementwiseEqual(_r, x))
    else 
      skip;

    return m->collect( _elem | if (_elem->oclAsType(double)) = x then true else false endif )


  static query detaux(x1 : double, x2 : double, y1 : double, y2 : double) : double 
  pre: true
  post: result = x1*y2 - x2*y1; 

  static query determinant2(m : Sequence(Sequence(OclAny))) : double 
  pre: m->size() = 2 & m[1]->size() = 2
  post: result = MatrixLib.detaux(m[1]->at(1)->oclAsType(double), m[1]->at(2)->oclAsType(double), m[2]->at(1)->oclAsType(double), m[2]->at(2)->oclAsType(double)); 

  static query determinant3(m : Sequence(Sequence(OclAny))) : double 
  pre: m->size() = 3 & m[1]->size() = 3
  post: true
  activity: 
    var subm1 : Sequence(Sequence(OclAny)) := 
      MatrixLib.subMatrix(m, Sequence{2,3}, Sequence{2,3}); 
    var subm2 : Sequence(Sequence(OclAny)) := 
      MatrixLib.subMatrix(m, Sequence{2,3}, Sequence{1,3}); 
    var subm3 : Sequence(Sequence(OclAny)) := 
      MatrixLib.subMatrix(m, Sequence{2,3}, Sequence{1,2}); 

    return (m[1]->at(1)->oclAsType(double))* MatrixLib.determinant2(subm1) - 
       (m[1]->at(2)->oclAsType(double))*MatrixLib.determinant2(subm2) + 
       (m[1]->at(3)->oclAsType(double))*MatrixLib.determinant2(subm3); 

   static query determinant(m : Sequence(OclAny)) : double
   pre: true
   post: true
   activity:
     var n : int := m->size();  

     if n = 1 
     then 
       return m->at(1)->oclAsType(double)
     else 
       skip; 

     if n = 2 
     then
       return MatrixLib.determinant2(m)
     else 
       skip; 

     if n = 3 
     then 
       return MatrixLib.determinant3(m)
     else skip;  

     var res : double := 0.0; 
     var row : Sequence(OclAny) := m->at(1); 
     var factor : int := 1; 

     for i : Integer.subrange(1,n)
     do 
       (var submat : Sequence(OclAny) := 
          MatrixLib.matrixExcludingRowColumn(m,1,i); 
        var det : double := 
          MatrixLib.determinant(submat); 
        res := res + 
               factor*(row->at(i)->oclAsType(double))*det;
        factor := factor*(-1)); 
      return res; 

       
   static query rowAddition(m1 : Sequence(OclAny), m2 : Sequence(OclAny)) : Sequence(OclAny)
   pre: true
   post: true
   activity:
     var res : Sequence(OclAny) := Sequence{}; 
 
     if m1->at(1)->oclIsTypeOf(Sequence)
     then 
       for i : Integer.subrange(1, m1->size()) 
       do
         res := res->append(MatrixLib.rowAddition(m1->at(i), m2->at(i))); 
       return res
     else skip; 

     for j : Integer.subrange(1, m1->size())
     do 
       res := res->append(
                m1->at(j)->oclAsType(double) + 
                m2->at(j)->oclAsType(double));
     return res;  
         

   static query matrixAddition(m1 : Sequence(OclAny), m2 : Sequence(OclAny)) : Sequence(OclAny)
   pre: true
   post: true
   activity: 
     var res : Sequence(OclAny) := Sequence{}; 

     for i : Integer.subrange(1,m1->size()) 
     do 
       res := res->append(MatrixLib.rowAddition(m1->at(i), m2->at(i))); 
     return res; 

   static query rowSubtraction(m1 : Sequence(OclAny), m2 : Sequence(OclAny)) : Sequence(OclAny)
   pre: true
   post: true
   activity:
     var res : Sequence(OclAny) := Sequence{}; 
 
     if m1->at(1)->oclIsTypeOf(Sequence)
     then 
       for i : Integer.subrange(1, m1->size()) 
       do
         res := res->append(MatrixLib.rowSubtraction(m1->at(i), m2->at(i))); 
       return res
     else skip; 

     for j : Integer.subrange(1, m1->size())
     do 
       res := res->append(
                m1->at(j)->oclAsType(double) - 
                m2->at(j)->oclAsType(double));
     return res;  

   static query matrixSubtraction(m1 : Sequence(OclAny), m2 : Sequence(OclAny)) : Sequence(OclAny)
   pre: true
   post: true
   activity: 
     var res : Sequence(OclAny) := Sequence{}; 

     for i : Integer.subrange(1,m1->size()) 
     do 
       res := res->append(MatrixLib.rowSubtraction(m1->at(i), m2->at(i))); 
     return res; 

   static query rowDotProduct(m1 : Sequence(OclAny), m2 : Sequence(OclAny)) : Sequence(OclAny)
   pre: true
   post: true
   activity:
     var res : Sequence(OclAny) := Sequence{}; 
 
     if m1->at(1)->oclIsTypeOf(Sequence)
     then 
       for i : Integer.subrange(1, m1->size()) 
       do
         res := res->append(MatrixLib.rowDotProduct(m1->at(i), m2->at(i))); 
       return res
     else skip; 

     for j : Integer.subrange(1, m1->size())
     do 
       res := res->append(
                m1->at(j)->oclAsType(double) * 
                m2->at(j)->oclAsType(double));
     return res;  
         

   static query dotProduct(m1 : Sequence(OclAny), m2 : Sequence(OclAny)) : Sequence(OclAny)
   pre: true
   post: true
   activity: 
     var res : Sequence(OclAny) := Sequence{}; 

     for i : Integer.subrange(1,m1->size()) 
     do 
       res := res->append(MatrixLib.rowDotProduct(m1->at(i), m2->at(i))); 
     return res; 

   static query rowDotDivision(m1 : Sequence(OclAny), m2 : Sequence(OclAny)) : Sequence(OclAny)
   pre: true
   post: true
   activity:
     var res : Sequence(OclAny) := Sequence{}; 
 
     if m1->at(1)->oclIsTypeOf(Sequence)
     then 
       for i : Integer.subrange(1, m1->size()) 
       do
         res := res->append(MatrixLib.rowDotDivision(m1->at(i), m2->at(i))); 
       return res
     else skip; 

     for j : Integer.subrange(1, m1->size())
     do 
       res := res->append(
                m1->at(j)->oclAsType(double) /
                m2->at(j)->oclAsType(double));
     return res;  

   static query dotDivision(m1 : Sequence(OclAny), m2 : Sequence(OclAny)) : Sequence(OclAny)
   pre: true
   post: true
   activity: 
     var res : Sequence(OclAny) := Sequence{}; 

     for i : Integer.subrange(1,m1->size()) 
     do 
       res := res->append(MatrixLib.rowDotDivision(m1->at(i), m2->at(i))); 
     return res; 

   static query rowLess(m1 : Sequence(OclAny), m2 : Sequence(OclAny)) : Sequence(OclAny)
   pre: true
   post: true
   activity:
     var res : Sequence(OclAny) := Sequence{}; 
 
     if m1->at(1)->oclIsTypeOf(Sequence)
     then 
       for i : Integer.subrange(1, m1->size()) 
       do
         res := res->append(MatrixLib.rowLess(m1->at(i), m2->at(i))); 
       return res
     else skip; 

     for j : Integer.subrange(1, m1->size())
     do 
       res := res->append(if
                m1->at(j)->oclAsType(double) < 
                m2->at(j)->oclAsType(double) then true else false endif);
     return res;  
         

   static query matrixLess(m1 : Sequence(OclAny), m2 : Sequence(OclAny)) : Sequence(OclAny)
   pre: true
   post: true
   activity: 
     var res : Sequence(OclAny) := Sequence{}; 

     for i : Integer.subrange(1,m1->size()) 
     do 
       res := res->append(MatrixLib.rowLess(m1->at(i), m2->at(i))); 
     return res; 

   static query rowGreater(m1 : Sequence(OclAny), m2 : Sequence(OclAny)) : Sequence(OclAny)
   pre: true
   post: true
   activity:
     var res : Sequence(OclAny) := Sequence{}; 
 
     if m1->at(1)->oclIsTypeOf(Sequence)
     then 
       for i : Integer.subrange(1, m1->size()) 
       do
         res := res->append(MatrixLib.rowGreater(m1->at(i), m2->at(i))); 
       return res
     else skip; 

     for j : Integer.subrange(1, m1->size())
     do 
       res := res->append(if
                m1->at(j)->oclAsType(double) > 
                m2->at(j)->oclAsType(double) then true else false endif);
     return res;  
         

   static query matrixGreater(m1 : Sequence(OclAny), m2 : Sequence(OclAny)) : Sequence(OclAny)
   pre: true
   post: true
   activity: 
     var res : Sequence(OclAny) := Sequence{}; 

     for i : Integer.subrange(1,m1->size()) 
     do 
       res := res->append(MatrixLib.rowGreater(m1->at(i), m2->at(i))); 
     return res; 

   static query transpose(m : Sequence(OclAny)) : Sequence(OclAny) 
   pre: true
   post: true
   activity: 
     if m->at(1)->oclIsTypeOf(Sequence) 
     then skip else return m; 

     var res : Sequence(OclAny) := Sequence{}; 

     for i : Integer.subrange(1, m->size())
     do 
       res := res->append(MatrixLib.column(m,i)); 

     return res; 
 }


}
