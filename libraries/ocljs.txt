// OCL library ocl.js

class Ocl {

static function newSet(...args)
{ var res = new Set();
  for (var x of args)
  { res.add(x); }
  return res;
}

static function newList(...args)
{ var res = [];
  for (var x of args)
  { res.push(x); }
  return res;
}

static function newMap(...args)
{ var res = new Map();
  for (var x of args)
  { res.set(x.at(0), x.at(1)); }
  return res;
}

static function sqr(x)  
{ return x*x; }

static function sqrt(x)  
{ return Math.sqrt(x); }

static function cbrt(x)  
{ return Math.cbrt(x); }

static function abs(x)  
{ return Math.abs(x); } 

static function gcd(xx,yy) 
{ var x = Math.abs(xx);
  var y = Math.abs(yy); 
  while (x != 0 && y != 0) 
  { z = y; 
    y = x % y; 
    x = z;
  }

  if (y == 0) 
  { return x; }
  
  if (x == 0) 
  { return y; }
 
  return 0;
}

static function roundTo(x,n) 
{ if (n == 0) 
  { return Math.round(x); }
  var y = x*Math.pow(10,n); 
  return Math.round(y)/Math.pow(10,n);
} 

static function truncateTo(x,n) 
{ if (n <= 0) 
  { return Math.trunc(x); }
  var y = x*Math.pow(10,n); 
  return Math.trunc(y)/Math.pow(10,n); 
}


static function isInteger(sx)  
{ var ss = "" + sx; 
  if (("" + parseInt(ss)) == ss) 
  { return true; } 
  return false; 
}

static function isLong(sx)  
{ return isInteger(sx); } 

static function isReal(sx)  
{ if (isInteger(sx)) 
  { return true; } 
  var ss = "" + sx; 
  if (("" + parseFloat(ss)) == ss) 
  { return true; } 
  return false; 
} 

static function oclIsTypeOf(x,typ) 
{ if ("int" == typ || "long" == typ)
  { return isInteger(x); }
  if ("double" == typ)
  { return isReal(x); }
  if ("boolean" == typ)
  { return (typeof x) == "boolean"; }
  if ("String" == typ)
  { return (typeof x) == "string"; }
  if (typ.startsWith("Sequence("))
  { return Array.isArray(x); }
  if (typ.startsWith("Function("))
  { return ((typeof x) == "function"); }
  if (typ.startsWith("Ref("))
  { return ((typeof x) == "symbol"); }
   if (typ.startsWith("Set("))
  { return x.toString().startsWith("[object Set"); }
  if (typ.startsWith("Map("))
  { return x.toString().startsWith("[object Map"); }
  if (x == null)
  { return typ == "void";}
  if ((typeof x) == "object")
  { return (x instanceof typ); }
  return false;
}

static function oclType(x) 
{ if (isInteger(x))
  { return "int"; }
  if (isReal(x))
  { return "double"; }
  if ((typeof x) == "string")
  { return "String"; }
  if (Array.isArray(x))
  { return "Sequence"; }
  if ((typeof x) == "function")
  { return "Function"; }
  if (x.toString() == "[object Map]")
  { return "Map"; }
  if (x.toString() == "[object Set]")
  { return "Set"; }
  // if ((typeof x) == "object")
  // { return ; }
  return (typeof x);
}

static function toInteger(sx) 
{ return parseInt("" + sx); }

static function toLong(sx) 
{ return parseInt("" + sx); }

static function toReal(sx) 
{ return parseFloat("" + sx); }

static function toBoolean(xx)  
{ if (xx == null || xx == 0 || xx == "") 
  { return false; } 
  if (xx == undefined) 
  { return false; } 
  if (Number.isNaN(xx)) 
  { return false; }
  if (("" + xx) == "false") 
  { return false; } 
  if ((typeof xx) == "number")
  { return true; }
  if (("" + xx) == "true") 
  { return true; } 
  return null; 
} 


static function char2byte(ch)  
{ if (ch == "") 
  { return -1; } 
  return ch.charCodeAt(0); 
} 

static function byte2char(bb)  
{ if (bb == -1) 
  { return ""; } 
  return String.fromCharCode(bb);  
} 

static function ord(lit)  
{ if ((typeof lit) == "string")  
  { return char2byte(lit); } 

  if ((typeof lit) == "number")
  { return lit; } 

  return null; 
}  // enum types?

static function succ(lit)  
{ if ((typeof lit) == "string") 
  { var litord = char2byte(lit); 
    return byte2char(litord + 1); 
  } 

  if ((typeof lit) == "number")
  { return lit + 1; } 

  return null; 
} 

static function pred(lit)  
{ if ((typeof lit) == "string") 
  { var litord = char2byte(lit); 
    return byte2char(litord - 1); 
  } 

  if ((typeof lit) == "number")
  { return lit - 1; }
 
  return null; 
} 

static function asBag(sq)  
{ return sq.toSorted(); } 
// a bag is a sorted sequence

static function mapAsBag(mp) 
{ // mp of type Map(T,int)
  var res = []; 
  for (var [k, v] of mp) 
  { var _i = 0;
    for (_i = 0; _i < v; _i++) 
    { res.push(k); }
  }
  return res.toSorted();
}
    
static function asOrderedSet(sq) 
{ var elems = new Set();
  var res = []
  for (var x of sq)
  { if (elems.has(x)) {}
    else 
    { res.push(x);
      elems.add(x);
    }
  }
  return res;
}

static function isUnique(s, f) 
{ var st = new Set();
  for (var x of s)
  { var y = f(x);
    if (st.has(y))
    { return false; }
    st.add(y);
  }
  return true;
}

static function isUniqueMap(m, f) 
{ var st = new Set();
  for (var [k,x] of m)
  { var y = f(x);
    if (st.has(y))
    { return false; }
    st.add(y);
  }
  return true;
}

static function any(s)  
{ var lst = Array.from(s);
  if (1 <= lst.length)  
  { return lst[0]; }
  return null;
}

static function anyMap(s)  
{ for (var [k,v] of s) 
  { return v; }
  return null;
}

static function anyCollection(s, f)  
{ for (var v of s) 
  { if (f(v)) 
    { return v; }
  }
  return null;
}

static function anyMapElement(s, f)  
{ for (var [k,v] of s) 
  { if (f(v)) 
    { return v; }
  }
  return null;
}

static function includesAllSet(supset,subset) 
{ for (var x of subset)
  { if (supset.has(x)) {}
    else 
    { return false; }
  }
  return true;
}

static function includesAllSequence(supset,subset) 
{ for (var x of subset)
  { if (supset.includes(x)) {}
    else 
    { return false; }
  }
  return true;
}

static function excludesAllSet(supset,subset) 
{ for (var x of subset)
  { if (supset.has(x))
    { return false; }
  }
  return true;
}

static function excludesAllSequence(supset,subset) 
{ for (var x of subset)
  { if (supset.includes(x))
    { return false; }
  }
  return true;
}

static function includesValue(mp, x) 
{ for (var [k,v] of mp) 
  { if (v == x) 
    { return true; }
  }
  return false;
}

static function excludesValue(mp, x) 
{ for (var [k,v] of mp)
  { if (v == x)
    { return false; }
  }
  return true;
}

static function iterate(sq,init,f)  
{ var acc = init;
  for (var x of sq) 
  { var g = f(x);
    acc = g(acc); 
  }
  return acc;
}

static function exists(col,f) 
{ for (var x of col)
  { if (f(x))
    { return true; }
  }
  return false;
}


static function forAll(col,f)   
{ for (var x of col)
  { if (f(x)) { }
    else 
    { return false; }
  }
  return true;
}

static function exists1(col,f) 
{ var found = false;
  for (var x of col)
  { if (f(x))
    { if (found)
      { return false; }
      else 
      { found = true; }
    }
  }
  return found;
}

static function toLowerCase(str) 
{ var s = "" + str;
  return s.toLowerCase();
}


static function toUpperCase(str) 
{ var s = "" + str;
  return s.toUpperCase();
}

static function before(s,sep) 
{ if (sep.length <= 0) 
  { return s; }
  var i = s.search(sep);
  if (i < 0)  
  { return s; }
  return s.substring(0,i);
}

static function after(s,sep)  
{ var j = sep.length;
  if (j <= 0) 
  { return ""; }
  var i = s.search(sep);
  if (i < 0) 
  { return ""; }
  return s.substring(i+j, s.length);
}


static function characters(str) 
{ var res = [];
  var n = str.length;
  for (var x = 0; x < n; x++)
  { res.push(str.at(x)); }
  return res;
}

static function insertAtString(x,i,s) 
{ // 1-based index i
  if (i <= 0) 
  { return x; }
  var n = x.length:
  var x1 = x.substring(0,i-1);
  var x2 = x.substring(i-1, n);
  return x1 + s + x2;
}

static function setAtString(x,i,s) 
{ // i must be > 0, s has length 1
  if (i <= 0) 
  { return x; }
  var n = x.length:
  var x1 = x.substring(0, i-1);
  var x2 = x.substring(i, n);
  return x1 + s + x2;
}

static function reverseString(st) 
{ var res = "";
  var n = st.length;
  for (var x = n-1; x >= 0; x--)
  { res = res + st.at(x); }
  return res;
}  

static function  subtractString(s1,s2)
{ var res = ""; 
  var n = s1.length;
  for (var x = 0; x < n; x++)
  { var sx = s1.at(x); 
    var ind = s2.search(sx);
    if (ind >= 0) { }
    else 
    { res = res + sx; }
  }
  return res;
}

static function equalsIgnoreCase(s1,s2) 
{ if (s1.toLowerCase() == s2.toLowerCase())
  { return true; }
  return false;
}

static function compareTo(s1,s2) 
{ var result = 0;
  if (s1 < s2)  
  { return -1; }
  if (s1 > s2)
  { return 1; }
  return result;
}

static function indexOfSequence(sq,x)
{ var indx = sq.indexOf(x);
  return indx + 1;
}

static function lastIndexOfSequence(sq,x) 
{ var indx = sq.lastIndexOf(x);
  return indx + 1;
}

static function lastIndexOf(s,d) 
{ var result = 0
  var dlen = d.length;
  if (dlen == 0) 
  { return 0; }
  var i = s.lastIndexOf(d);
  if (i < 0)
  { return 0; }
  return i+1;
}

static function lastIndexOfString(s, d) 
{ return lastIndexOf(s,d); }

static function hasPrefixSequence(sq,sq1)
{ return hasPrefixSubSequence(sq,sq1,0); }

static function hasSuffixSequence(sq,sq1)
{ var m = sq1.length;
  var n = sq.length;
  if (m == 0 || n == 0 || n < m)
  { return false; }
  return hasPrefixSubSequence(sq,sq1,n-m); 
}

static function hasPrefixSubSequence(sq,sq1,j) 
{ // sq1 is a prefix of sq 
  // starting from position j

  var m = sq1.length;
  var n = sq.length;
  if (m == 0 || n == 0 ||
      n < j+m) 
  { return false; }
  var i = 0;
  while (i < m && i+j < n) 
  { if (sq[i+j] != sq1[i]) 
    { return false; } 
    i = i+1;
  }
  return true;
}


static function indexOfString(ss,sub) 
{ var n = ss.search(sub);
  return n + 1;
}

static function indexOfSubSequence(sq,sq1) 
{ var m = sq1.length;
  var n = sq.length;
  if (m == 0 || n == 0 || 
      n < m) 
  { return 0; } // not found
  var i = 0;
  while (i+m <= n) 
  { if (hasPrefixSubSequence(sq,sq1,i))
    { return i+1; }
    i = i + 1;
  }
  return 0;
}


static function lastIndexOfSubSequence(sq,sq1) 
{ var m = sq1.length;
  var n = sq.length;
  if (m == 0 || n == 0 || 
      n < m) 
  { return 0; }
  var rsq = sq.toReversed();
  var rsq1 = sq1.toReversed();
  var i = indexOfSubSequence(rsq,rsq1);
  if (i <= 0)
  { return 0; }
  return n - i - m + 2;
}

static function at(sq,i) 
{ if (i <= 0) 
  { return null; }
  if (sq.length > i) 
  { return null; }
  return sq[i-1];
}

static function first(sq)  
{ if (sq.length == 0) 
  { return null; }
  return sq.at(0);
} // also for strings

static function last(sq) 
{ if (sq.length == 0) 
  { return null; }
  return sq.at(sq.length - 1);
}

static function front(sq) 
{ if (sq.length == 0) 
  { return sq; } 
  return sq.slice(0, sq.length-1);
}

static function tail(sq) 
{ if (sq.length == 0) 
  { return sq; } 
  return sq.slice(1,sq.length);
}

static function firstSortedMap(mm) 
{ if (mm.size == 0) 
  { return null; }
  for (var [i,v] of mm)
  { return v; }
}
  
// def lastSortedMap(mm) : 
//   if len(mm) == 0 : 
//     return None
//   itm = mm.peekitem(-1)
//   lst = []
//   lst.append(itm)
//   res = SortedDict(lst)
//   return res
  
// def frontSortedMap(mm) :
//   if len(mm) == 0 : 
//     return mm
//   res = mm.copy()
//   res.popitem(-1) 
//   return res

// def tailSortedMap(mm) :
//   if len(mm) == 0 : 
//     return mm
//   res = mm.copy()
//   res.popitem(0) 
//   return res


static function trim(str) : 
{ var res = "" + str;
  return res.trim();
}


static function replace(str,sub,rep) 
{ var res = "" + str;
  return res.replace(sub,rep)
}

static function splitByAll(str, delimiters) 
{ if (0 < delimiters.length)   
  { var delim = delimiters[0]; 
    var taildelims = delimiters.slice(1);
    var splits = str.split(delim);
    var res = [] 
    for (var st of splits) 
    { if (st.length > 0) 
      { var spltall = splitByAll(st, taildelims);
        res = res.concat(spltall);
      }
    }
    return res;
  }
  else 
  { var result = []; 
    result.push(str); 
    return result;
  }
}


static function split(str, pattern) 
{ var splits = str.split(pattern);
  var res = []; 
  for (var st of splits) 
  { if (st.length > 0) 
    { res.push(st); }
  }
  return res;
}


static function isMatch(str, pattern) 
{ var re = new RegExp(pattern);
  var mtchs = str.match(re);
  if (mtchs.length > 0)
  { var mtch = mtchs.at(0);
    if (mtch == str)
    { return true; }
  }
  return false;
}

static function hasMatch(str, pattern) 
{ var re = new RegExp(pattern, 'g');
  var mtchs = str.match(re);
  if (mtchs.length > 0)
  { return true; }
  return false;
}

static function firstMatch(str, pattern) 
{ var re = new RegExp(pattern, 'g');
  var mtchs = str.match(re);
  if (mtchs.length > 0)
  { return mtchs[0]; }
  return null;
} 

static function allMatches(str, pattern) 
{ var re = new RegExp(pattern, 'g');
  var mtchs = str.match(re);
  if (mtchs.length > 0)
  { return mtchs; }
  return null;
}  

static function replaceAll(str, pattern, repl) 
{ var res = "" + str;
  res = res.replaceAll(pattern, repl);
  return res;
}


static function replaceAllMatches(str, pattern, repl) 
{ return replaceAll(str, pattern, repl); }


static function replaceFirstMatch(str, pattern, repl) 
{ var res = "" + str;
  res = str.replace(pattern, repl);
  return res;
}

static function insertInto(x,i,s) 
{ // i must be > 0
  if (i <= 0) 
  { return x; }
  var x1 = x.slice(0,i-1);
  var x2 = x.slice(i-1);
  var res = x1.concat(s);
  return res.concat(x2);
} // for sequences

static function excludingSubrange(x,i,j)
{ // i must be > 0, i <= j
  if (i <= 0) 
  { return x; }
  if (i > j) 
  { return x; }
  var x1 = x.slice(0,i-1);
  var x2 = x.slice(j);
  return x1.concat(x2);
} // ok for strings, sequences

static function setSubrange(x,i,j,v) :
{ // sequences, strings. i must be > 0, i <= j
  if (i <= 0) 
  { return x; }
  if (i > j) 
  { return x; }
  return x.slice(0,i-1).concat(v).concat(x.slice(j));
}

static function sequenceSubrange(l, i, j)
{ // For lists. OCL indexing used for i, j
  var result = [];
  if (j < 0) 
  { j = l.length + j; }
  // eg: -1 is the last element of l
  if (i == 0) 
  { i = 1; }
  if (i < 0)
  { i = l.length + i; }
  
  for (var k = i-1; k < j; k++)
  { result.push(l[k]); }
  return result;
}

static function integerSubrange(i, j)
{ var result = [];
  for (var k = i; k <= j; k++)
  { result.push(k); }
  return result;
}


static function insertAt(x,i,s) 
{ // i must be > 0
  if (i <= 0) 
  { return x; }
  var sq = x.slice(0,i-1);
  sq.push(s);
  return sq.concat(x.slice(i-1));
} // sequences

static function insertAtString(x,i,s) 
{ // i must be > 0
  if (i <= 0) 
  { return x; }
  var sq = x.slice(0,i-1);
  sq = sq + s;
  return sq.concat(x.slice(i-1));
} // string

static function setAt(sq,i,val)  
{ var res = sq;
  if (i >= 1 && i <= sq.length)  
  { res[i-1] = val; }
  return res;
} // sequences

static function removeAt(sq,i)  
{ 
  if (i >= 1 && i <= sq.length)
  { return sq.slice(0,i-1).concat(sq.slice(i)); }
  return sq;
} // ok for sequences, strings

static function setAtMap(sq,k,val) 
{ var res = new Map(sq);
  res.set(k, val);
  return res;
}

static function removeAtMap(sq,k) 
{ var res = new Map(sq);
  res.delete(k);
  return res;
}

static function removeAtString(ss,i)  
{ var res = "" + ss;
  if (i == 1 && i <= ss.length) 
  { return res.slice(1); }
  if (i >= 2 && i <= ss.length) 
  { return ss.slice(0, i-1) + ss.slice(i); }
  return res;
}

static function excludingAtString(ss,i) 
{ return removeAtString(ss,i); }


static function excludingFirst(sq,x) 
{ var ind = sq.indexOf(x);
  if (ind < 0)
  { return sq; }
  var res = sq.slice(0,ind); 
  return res.concat(sq.slice(ind+1));
} // ok for sequences, strings


static function includingSequence(s,x) :
{ var res = [].concat(s);
  res.push(x);
  return res;
}

// def includingSortedSequence(s,x) :
//  res = s.copy()
//  res.add(x)
//  return res

static function includingSet(s,x) 
{ var res = new Set();
  res = res.union(s);
  res.add(x);
  return res;
}

// def includingSortedSet(s,x) :
//  res = s.copy()
//  res.add(x)
//  return res


static function excludeAllSequence(s1,s2)
{ var res = [];
  for (var x of s1)
  { if (s2.includes(x))
    { }
    else  
    { res.push(x); }
  }
  return res;
}

static function excludeAllSet(s1,s2) 
{ var res = new Set();
  res = res.union(s1);
  return res.difference(s2);
}

static function excludeAllSortedSet(s1,s2) 
{ return s1.difference(s2); }


static function excludingSequence(s,y) 
{ var res = [];
  for (var x of s)
  { if (x == y) { }
    else
    { res.push(x); }
  }
  return res;
}

static function excludingSet(s,x) 
{ var res = new Set();
  res = res.union(s);
  res.delete(x);
  return res;
}

static function excludingSortedSet(s,x)
{ var xset = new Set(); 
  xset.add(x);
  return res.difference(xset);
}

static function prepend(s,x) 
{ var res = [x];
  return res.concat(s);
}

static function append(s,x) 
{ var res = [].concat(s)
  res.push(x);
  return res;
}


static function union(s,t) 
{ var res = [].concat(s);
  for (var x of t) 
  { if (s.includes(x)) 
    { }
    else  
    { res.push(x); }
  }
  return res;
} // of sequences as sets

static function unionSequence(s,t)
{ var res = [].concat(s);
  return res.concat(t);
}

static function unionSet(s,t) 
{ var res = new Set();
  res = res.union(s);
  return res.union(t);
}

// def unionSortedSet(s,t) :
//  res = s.copy()
//  return res.union(t)
 

static function concatenate(s,t) 
{ var res = [].concat(s);
  return res.concat(t);
}
 

static function intersectionSequence(s,t) 
{ var res = [];
  for (var x of s)
  { if (t.includes(x))
    { res.push(x); }
  }
  return res;
}

static function intersectionSet(s,t) 
{ return s.intersection(t); } 

static function intersectionSortedSet(s,t) 
{ return s.intersection(t); } 

static function concatenateAll(sq) 
{ var res = [];
  for (var s of sq) 
  { res = res.concat(s); }
  return res;
}


static function unionAll(sq) 
{ var res = any(sq);
  for (var s of sq) 
  { res = res.union(s); }
  return res;
}

static function intersectAllSet(sq) 
{ var res = any(sq);
  for (var s of sq)
  { res = res.intersection(s); }
  return res;
}

static function intersectAllSequence(sq) 
{ var res = any(sq);
  for (var s of sq) 
  { res = intersectionSequence(res,s); }
  return res;
}


static function reverseSequence(s) 
{ return s.toReversed(); }


static function reverseSet(s) 
{ var res = new Set(); 
  var sq = Array.from(s);
  return res.union(sq.toReversed());
} 


static function sortSequence(s) 
{ if (s.length == 0) 
  { return []; } 
  
  var s0 = s[0]; 

  if ((typeof s0) == "number")
  { return s.toSorted((a, b) => a - b); } 
  
  return s.toSorted(); 
} 


static function sortSet(s) 
{ var res = Array.from(s); 
  res = sortSequence(res);
  var result = new Set();
  for (var x of res)
  { result.add(x); }
  return result;
}

static function sortMap(s) 
{ var ks = s.keys();
  var m = new Map();
  var res = Array.from(ks); 
  res = sortSequence(res);
  for (var k of res) 
  { m.set(k, s.get(k)); }
  return m;
}

static function sortedBy(s, fields)
{ var n = fields.length;
  var p = Array.from(s);
  for (var ind = n-1; ind >= 0; ind--)
  { var f = fields[ind];
    p = p.asSorted((a,b) => compareTo(f(a), f(b)));
  }
  return p;
} // for collections


static function selectSet(s,f) 
{ var res = new Set();
  for (var x of s)
  { if (f(x))
    { res.add(x); }
  }
  return res;
}

static function selectSortedSet(s,f) 
{ return selectSet(s, f); }

static function selectSequence(s,f) 
{ return s.filter(f); }

static function rejectSet(s,f)  
{ var res = new Set();
  for (var x of s)
  { if (f(x)) { }
    else
    { res.add(x); }
  }
  return res;
}  

static function rejectSortedSet(s,f) 
{ return rejectSet(s, f); }

static function rejectSequence(s,f) 
{ return s.filter((x) => !(f(x))); }

static function collectSet(s,f) 
{ var res = [];
  for (var x of s)
  { res.push(f(x)); }
  return res;
}

static function collectSequence(s,f) 
{ return s.map(f); }

static function any1(s,f) 
{ for (var x of s) 
  { if (f(x)) 
    { return x; }
  }
  return null;
}

static function selectMaximalsSequence(col,f)
{ var result = [];
  if (col.length == 0)
  { return result; }
  var maximal = f(col[0]);
  var result = [col[0]];
  for (var ind = 1; ind < col.length; ind++)
  { var x = col{ind];
    var value = f(x);
    if (value > maximal)
    { result = [x];
      maximal = value;
    }
    else  
    { if (value == maximal)
      { result.push(x); }
    }
  }
  return result;
}
 
static function selectMaximalsSet(col,f) 
{ var result = new Set();
  if (col.size == 0)
  { return result; }
  var elem = any(col);
  var maximal = f(elem);
  result.add(elem);

  for (var x of col)
  { var value = f(x);
    if (value > maximal)
    { result = new Set();
      result.add(x);
      maximal = value;
    }
    else 
    { if (value == maximal)
      { result.add(x); }
    }
  }
  return result;
}

static function selectMinimalsSequence(col,f) 
{ var result = [];
  if (col.length == 0)
  { return result; }
  var minimal = f(col[0]);
  var result = [col[0]];
  for (var ind = 1; ind < col.length; ind++)
  { var x = col{ind];
    var value = f(x);
    if (value < minimal)
    { result = [x];
      minimal = value;
    }
    else  
    { if (value == minimal)
      { result.push(x); }
    }
  }
  return result;
}


static function selectMinimalsSet(col,f)
{ var result = new Set();
  if (col.size == 0)
  { return result; }
  var elem = any(col);
  var minimal = f(elem);
  result.add(elem);

  for (var x of col)
  { var value = f(x);
    if (value < minimal)
    { result = new Set();
      result.add(x);
      minimal = value;
    }
    else 
    { if (value == minimal)
      { result.add(x); }
    }
  }
  return result;
}

static function selectMinimalsMap(m,f)
{ var result = new Map();
  if (m.size == 0)
  { return result; }
  var elem = anyMap(m);
  var minimal = f(elem);

  for (var [k,x] of m)
  { var value = f(x);
    if (value < minimal)
    { result = new Map();
      result.set(k,x);
      minimal = value;
    }
    else 
    { if (value == minimal)
      { result.set(k,x); }
    }
  }
  return result;
}

static function selectMaximalsMap(m,f)
{ var result = new Map();
  if (m.size == 0)
  { return result; }
  var elem = anyMap(m);
  var maximal = f(elem);

  for (var [k,x] of m)
  { var value = f(x);
    if (value > maximal)
    { result = new Map();
      result.set(k,x);
      maximal = value;
    }
    else 
    { if (value == maximal)
      { result.set(k,x); }
    }
  }
  return result;
}

static function minSequence(sq) 
{ var result = sq[0];
  for (var x of sq)
  { if (x < result)
    { result = x; }
  }
  return result;
}

static function minSet(col) 
{ var result = any(col);
  for (var x of col)
  { if (x < result)
    { result = x; }
  }
  return result;
}

static function maxSequence(sq) 
{ var result = sq[0];
  for (var x of sq)
  { if (x > result)
    { result = x; }
  }
  return result;
}

static function maxSet(col)
{ var result = any(col);
  for (var x of col)
  { if (x > result)
    { result = x; }
  }
  return result;
}
 

static function sum(col) 
{ var result = 0;
  for (var x of col) 
  { result = result + x; }
  return result;
}

static function sumint(col)
{ return sum(col); }

static function sumlong(col) 
{ return sum(col); }

static function sumdouble(col) 
{ var result = 0.0;
  for (var x of col) 
  { result = result + x; }
  return result;
}

static function sumString(col)  
{ var result = "";
  for (var x of col) 
  { result = result + x; }
  return result;
}

static function prd(col)  
{ var result = 1;
  for (var x of col) 
  { result *= x; }
  return result;
}


static function includesAllMap(supset,subset) 
{ for (var [x,v] of subset)
  { if (supset.has(x) && 
        v == supset.get(x))
    { }  
    else
    { return false; }
  }
  return true;
}


static function excludesAllMap(supset,subset) 
{ for (var [x,v] of subset)
  { if (supset.has(x))
    { if (v == supset.get(x))
      { return false; }
    }
  }
  return true;
}

static function existsMap(m,f) 
{ for (var [x,v] of m)
  { if (f(v))
    { return true; }
  }
  return false;
}

static function forAllMap(m,f) 
{ for (var [x,v] of m)
  { if (f(v)) { }
    else
    { return false; }
  }
  return true;
}

static function exists1Map(m,f) 
{ var found = false;
  for (var [x,v] of m)
  { if (f(v))
    { if (found)
      { return false; }
      else 
      { found = true; }
    }
  }
  return found;
}


static function includingMap(m,x,y) 
{ var res = new Map(m);
  res.set(x,y);
  return res;
}


static function excludeAllMap(s1,s2)
{ var res = new Map();
  for (var [x,v] of s1)
  { if (s2.has(x))
    { } 
    else 
    { res.set(x,v); }
  }
  return res;
}

static function excludingMapKey(m,y) 
{ var res = new Map();
  for (var [x,v] of m)  
  { if (x == y) { }
    else 
    { res.set(x,v); }
  }
  return res;
}

static function excludingMapValue(s,y) 
{ var res = new Map();
  for (var [x,v] of s)
  { if (v == y) { }
    else 
    { res.set(x,v); }
  }
  return res;
}

static function maxMap(col)
{ if (col.size == 0)
  { return null; }
  var result = null;
  for (var [k,v] of col)
  { if (result == null)
    { result = v; }
    else if (v > result)
    { result = x; }
  }
  return result;
}

static function minMap(col)
{ if (col.size == 0)
  { return null; }
  var result = null;
  for (var [k,v] of col)
  { if (result == null)
    { result = v; }
    else if (v < result)
    { result = x; }
  }
  return result;
}

static function unionMap(s,t)
{ var res = new Map(s);
  for (var [x,v] of t)
  { res.set(x, v); }
  return res;
}

static function unionAllMap(sq) 
{ var res = new Map();
  for (var s of sq) 
  { res = unionMap(res,s); }
  return res;
}


static function intersectionMap(s,t) 
{ var res = new Map();
  for (var [x,v] of s)
  { if (t.has(x) && v == t.get(x))
    { res.set(x,v); } 
  }
  return res;
}

static function intersectAllMap(sq) 
{ var res = new Map();
  if (sq.length == 0) 
  { return res; }
  res = sq[0];

  for (var s of sq) 
  { res = intersectionMap(res,s); }
  return res;
}

static function selectMap(m,p) 
{ var res = new Map();
  for (var [x,v] of m)
  { if (p(v))
    { res.set(x,v); }
  }
  return res;
}

static function rejectMap(m,p) 
{ var res = new Map();
  for (var [x,v] of m)
  { if (p(v)) { }
    else
    { res.set(x,v); }
  }
  return res;
}


static function collectMap(m,e) 
{ var res = new Map();
  for (var [x,v] of m)
  { res.set(x, e(v)); }
  return res;
}

static function restrict(m,ks) 
{ var res = new Map();
  for (var [x,v] of m)
  { if (ks.has(x))
    { res.set(x,v); }
  }
  return res;
}

static function antirestrict(m,ks) 
{ var res = new Map();
  for (var [x,v] of m)
  { if (ks.has(x))
    { } 
    else 
    { res.set(x,v); }
  }
  return res;
}

static function excludingAtMap(m,k) 
{ var res = new Map();
  for (var [x,v] of m) 
  { if (x == k) { } 
    else 
    { res.set(x,v); }
  }
  return res;
}

static function keys(m) 
{ var res = new Set(m.keys());
  return res;
}


static function values(m) 
{ var res = Array.from(m.values());
  return res;
} // should be a sequence?

}

// sortedBy is used like this: 
// var data = ["1111234", "1000234", "1000421", "1111012"];
// var sdata = sortedBy(data, [(s) => s.slice(0,5), (s) => s.slice(5,8)]);

// var ss = "a long string";
// var pp = setSubrange(ss, 3, 5, "and");

// var ss = [1, 4, 6, 7, 2];
// alert(listSubrange(ss, 2, -1));

// var mp = new Map([["a", 1], ["b", 2]]);

// alert(excludesValue(mp,2));
// alert(excludesValue(mp,4));

// var mp = new Map([["c", 1], ["b", 4], ["a", 2]]);
// var ms = sortMap(mp);
// alert(ms);

// var bg = mapAsBag(mp);
// alert(bg);



