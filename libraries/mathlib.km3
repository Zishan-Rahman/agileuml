package mathlib { 


  class MathLib {

    stereotype external; 
    stereotype component; 


    static attribute ix : int;

    static attribute iy : int;

    static attribute iz : int;

    static attribute defaultTolerance : double; 

    static attribute hexdigit : Sequence(String); 

    static operation initialiseMathLib() : void
    pre: true
    post: true
    activity: 
      (MathLib.hexdigit := Sequence{ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F" } ; MathLib.setSeeds(1001, 781, 913) ; MathLib.defaultTolerance := 0.001 ); 

    static query pi() : double
    pre: true
    post: result = 3.14159265;

    static query piValue() : double
    pre: true
    post: result = 3.1415926535897932384626433;

    static query e() : double
    pre: true
    post: result = 1->exp();

    static query eValue() : double
    pre: true
    post: result = 2.71828182845904523536028747135266249775724709369995;

    static query gammaValue() : double
    pre: true
    post: result = 0.5772156649015328606065120900824024310421;

    static operation setSeeds(x : int , y : int , z : int ) : void
    pre: true
    post: MathLib.ix = x & MathLib.iy = y & MathLib.iz = z;

    static operation setSeed(r : int) : void
    pre: true
    post: MathLib.setSeeds((r mod 30269), (r mod 30307), (r mod 30323));

    static operation nrandom() : double
    pre: true
    post: true
    activity: ( MathLib.ix := ( MathLib.ix * 171 ) mod 30269 ; MathLib.iy := ( MathLib.iy * 172 ) mod 30307 ; MathLib.iz := ( MathLib.iz * 170 ) mod 30323 ; return ( MathLib.ix / 30269.0 + MathLib.iy / 30307.0 + MathLib.iz / 30323.0 ) );

    static query random() : double
    pre: true
    post: r = MathLib.nrandom() & result = ( r - r->floor() );

    static query combinatorial(n : int , m : int ) : long
    pre: n >= m & m >= 0
    post: ( n - m < m => result = Integer.Prd(m + 1,n,i,i) / Integer.Prd(1,n - m,j,j) ) & ( n - m >= m => result = Integer.Prd(n - m + 1,n,i,i) / Integer.Prd(1,m,j,j) );

    static query factorial(x : int ) : long
    pre: true
    post: ( x < 2 => result = 1 ) & ( x >= 2 => result = Integer.Prd(2,x,i,i) );

    static query asinh(x : double ) : double
    pre: true
    post: result = ( x + ( x * x + 1 )->sqrt() )->log();

    static query acosh(x : double ) : double
    pre: x >= 1
    post: result = ( x + ( x * x - 1 )->sqrt() )->log();

    static query atanh(x : double ) : double
    pre: x /= 1
    post: result = 0.5 * ( ( 1 + x ) / ( 1 - x ) )->log();

    static query decimal2bits(x : long ) : String
    pre: true
    post: if x = 0 then result = "" else result = MathLib.decimal2bits(x / 2) + "" + ( x mod 2 ) endif;

    static query decimal2binary(x : long ) : String
    pre: true
    post: if x < 0 then result = "-" + MathLib.decimal2bits(-x) else if x = 0 then result = "0" else result = MathLib.decimal2bits(x) endif endif;

    static query decimal2oct(x : long ) : String
    pre: true
    post: if x = 0 then result = "" else result = MathLib.decimal2oct(x / 8) + "" + ( x mod 8 ) endif;

    static query decimal2octal(x : long ) : String
    pre: true
    post: if x < 0 then result = "-" + MathLib.decimal2oct(-x) else if x = 0 then result = "0" else result = MathLib.decimal2oct(x) endif endif;

   static query decimal2hx( x : long) : String
   pre: true
   post: if x = 0 then result = "" else result = MathLib.decimal2hx(x/16) + ("" + MathLib.hexdigit->at((x mod 16)->oclAsType(int) + 1)) endif; 

    static query decimal2hex(x : long ) : String
    pre: true
    post: if x < 0 then result = "-" + MathLib.decimal2hx(-x) else if x = 0 then result = "0" else result = MathLib.decimal2hx(x) endif endif;


    static query bytes2integer(bs : Sequence(int)) : long
    pre: true 
    post: (bs->size() = 0 => result = 0) & (bs->size() = 1 => result = bs->at(1)) & (bs->size() = 2 => result = 256*(bs->at(1)) + bs->at(2)) & (bs->size() > 2 => result = 256*MathLib.bytes2integer(bs->front()) + bs->last()); 

    static query integer2bytes(x : long) : Sequence(int)
    pre: true
    post: if (x/256) = 0 then result = Sequence{(x mod 256)->oclAsType(int)} else result = MathLib.integer2bytes(x/256)->append((x mod 256)->oclAsType(int)) endif; 

    static query integer2Nbytes(x : long, n : int) : Sequence(int)
    pre: true 
    post: bs = MathLib.integer2bytes(x) & ((bs->size() < n => result = (Integer.subrange(1,n-(bs->size()))->collect(0))->concatenate(bs)) & (bs->size() >= n => result = bs)); 

    static query bitwiseAnd(x : int, y : int) : int
    pre: true post: true 
    activity: 
      var x1 : int ; x1 := x; 
       var y1 : int ; y1 := y; 
       var k : int ; k := 1;
       var res : int ; res := 0;   
       while (x1 > 0 & y1 > 0)
       do
        ( if x1 mod 2 = 1 & y1 mod 2 = 1
          then 
            res := res + k 
          else skip ;  
	     k := k*2; 
	     x1 := x1/2;
	     y1 := y1/2
        ) ; 
        return res; 

    static query bitwiseOr(x : int, y : int) : int
    pre: true post: true 
    activity: 
      var x1 : int ; x1 := x; 
       var y1 : int ; y1 := y; 
       var k : int ; k := 1;
       var res : int ; res := 0;   
       while (x1 > 0 or y1 > 0)
       do
        ( if x1 mod 2 = 1 or y1 mod 2 = 1
          then 
            res := res + k 
          else skip ;  
	     k := k*2; 
	     x1 := x1/2;
	     y1 := y1/2
        ) ; 
        return res; 

  static query bitwiseXor(x : int, y : int) : int
    pre: true post: true 
    activity: 
      var x1 : int ; x1 := x; 
       var y1 : int ; y1 := y; 
       var k : int ; k := 1;
       var res : int ; res := 0;   
       while (x1 > 0 or y1 > 0)
       do
        ( if (x1 mod 2) /= (y1 mod 2)
          then 
            res := res + k 
          else skip ;  
	     k := k*2; 
	     x1 := x1/2;
	     y1 := y1/2
        ) ; 
        return res; 

  static query bitwiseNot(x : int) : int
  pre: true post: result = -(x+1); 

  static query toBitSequence(x : long) : Sequence(boolean)
  pre: true post: true
  activity: 
    var x1 : long ; x1 := x ; 
    var res : Sequence(boolean) ; res := Sequence{} ; 
    while x1 > 0
    do
    ( if x1 mod 2 = 0
      then 
        res := res->prepend(false)
      else 
        res := res->prepend(true) ; 
      x1 := x1/2
    ) ; 
    return res;   

  static query modInverse(n : long, p : long) : long
  pre: true post: true 
  activity: 
    var x : long ; x := (n mod p) ; 
    var i : int; 
    i := 1; 
    while i < p
    do 
      (if ((i*x) mod p) = 1  
      then return i
      else skip; 
      i := i+1 ) ; 
    return 0; 

  static query modPow(n : long, m : long, p : long) : long 
  pre: true post: true
  activity:
    var res : long ; res := 1 ; 
    var x : long ; x := (n mod p) ;  
    var i : int ; 
    i := 1 ; 
    while i <= m 
    do 
      ( res := ((res*x) mod p) ; i := i + 1) ; 
    return res; 

  static query doubleToLongBits(d : double) : long
  pre: true post: true; 

  static query longBitsToDouble(x : long) : double
  pre: true post: true; 

 static query roundN(x : double, n : int) : double
 pre: true
 post: true 
 activity: 
   var y : double ; 
   y := x*(10->pow(n)) ; 
   return (y->round())/(10->pow(n)); 

 static query truncateN(x : double, n : int) : double
 pre: n >= 0 
 post: true 
 activity: 
   var y : double ; 
   y := x*(10->pow(n)) ; 
   return (y->oclAsType(int))/(10.0->pow(n)); 

 static query toFixedPoint(x : double, m : int, n : int) : double
 pre: m >= 0 & n >= 0
 post: true 
 activity: 
  var y : int ; 
  y := (x*(10->pow(n)))->oclAsType(int) ; 
  var z : int ; 
  z := y mod (10->pow(m+n))->oclAsType(int) ; 
  return z/(10->pow(n)); 

 static query toFixedPointRound(x : double, m : int, n : int) : double
 pre: m >= 0 & n >= 0
 post: true 
 activity: 
  var y : int ; 
  y := (x*(10->pow(n)))->round()->oclAsType(int) ; 
  var z : int ; 
  z := y mod (10->pow(m+n))->oclAsType(int) ; 
  return z/(10->pow(n)); 

  static query isIntegerOverflow(x : double, m : int) : boolean
  pre: true 
  post: y = x->oclAsType(int) & ( (y > 0 => result = (y->log10()->oclAsType(int) + 1 > m)) & 
(y < 0 => result = ((-y)->log10()->oclAsType(int) + 1 > m)) & (true => result = (m < 1)) ); 

  static query leftTruncateTo(x : double, m : int) : double
  pre: true 
  post: y = x->oclAsType(int) & result = (y mod (10->pow(m)->oclAsType(int))) + (x - y); 

  static query mean(sq : Sequence(double)) : double
  pre: sq->size() > 0
  post: result = (sq->sum())/(sq->size()); 

  static query median(sq : Sequence(double)) : double
  pre: sq->size() > 0
  post: s1 = sq->sort() & sze = sq->size() & ( ( sze mod 2 = 1 => result = s1->at((1 + sze)/2) ) & ( sze mod 2 = 0  => result = ( s1->at(sze/2) + s1->at(1 + (sze/2)) )/2.0 ) ); 

  static query variance(sq : Sequence(double)) : double 
  pre: sq->size() > 0
  post: m = MathLib.mean(sq) & result = ( sq->collect( x | (x - m)->sqr() )->sum() ) / ( sq->size() ); 

  static query standardDeviation(sq : Sequence(double)) : double 
  pre: true
  post: (sq->size() = 0 => result = 0) & (sq->size() > 0 => result = MathLib.variance(sq)->sqrt());  

  static query lcm(x : int, y : int) : int
  pre: true 
  post: 
    (x = 0 & y = 0 => result = 0) & 
    (true => result = ((x*y)/(x->gcd(y)))->oclAsType(int) ); 

  static query bisectionAsc(r : double, rl : double, ru : double, f : Function(double,double), tol : double) : double
  pre: true 
  post: v = f->apply(r) & 
    ((v < tol & v > -tol => result = r) &
     (v > 0 => result = MathLib.bisectionAsc((rl + r) / 2.0, rl, r, f, tol)) & 
     (v < 0 => result = MathLib.bisectionAsc((r + ru) / 2.0, r, ru, f, tol))); 

  static query rowMult(s : Sequence(double), m : Sequence(Sequence(double))) : Sequence(double)  
  pre: true 
  post: result = Integer.subrange(1, s.size)->collect( i | Integer.Sum(1, m.size, k, s[k]*(m[k]->at(i))));

   static query matrixMultiplication(m1: Sequence(Sequence(double)), m2 : Sequence(Sequence(double))) : Sequence(Sequence(double))
   pre: true
   post: result = m1->collect( row | MathLib.rowMult(row, m2) );

   static query differential(f : Function(double,double)) : Function(double,double)
   pre: true 
   post: 
     result = lambda x : double in ((1.0/(2.0*MathLib.defaultTolerance))*(f->apply(x+MathLib.defaultTolerance) - f->apply(x-MathLib.defaultTolerance))); 

  static query definiteIntegral(st : double , en : double , f : Function(double,double) ) : double
  pre: true
  post: true
  activity:
    var tol : double := MathLib.defaultTolerance; 
    var area : double := 0.0; 
    var d : double := tol*(en - st); 
    var cum : double := st; 
    while cum < en
    do (
      var next : double := cum + d; 
      area := area + d*(f->apply(cum) + f->apply(next))/2.0; 
      cum := next 
    );  
    return area;

 static query indefiniteIntegral(f : Function(double,double)) : Function(double,double)
   pre: true 
   post: result = lambda x : double in MathLib.definiteIntegral(0,x,f); 

   static query numericRange(st : double, en : double, step : double) : Sequence(double) 
   pre: step > 0
   post: true
   activity: 
     var res : Sequence(double) := Sequence{st}; 
     var x : double := st + step; 
     while x < en 
     do 
       (res := res->append(x) ; 
        x := x + step); 
     return res; 

   static query numericSeries(st : double, en : double, steps : int) : Sequence(double) 
   pre: steps > 1
   post: true
   activity: 
     var res : Sequence(double) := Sequence{st};
     var step : double := (en - st)/(steps - 1);  
     var x : double := st + step; 
     while x < en 
     do 
       (res := res->append(x) ; 
        x := x + step); 
     return res; 
 
 }




  class FinanceLib {

    stereotype external; 
    stereotype component; 

  static query discountDiscrete(amount : double, rate: double, time: double) : double
  pre: rate > -1
  post: result = amount/((1+rate)->pow(time)); 

  static query presentValueDiscrete(rate: double, values: Sequence(double)) : double
  pre: rate > -1
  post: 
    result = Integer.subrange(1,values->size())->collect( _ind | FinanceLib.discountDiscrete(values->at(_ind), rate, _ind ) )->sum(); 

  static query netPresentValueDiscrete(rate: double, values: Sequence(double)) : double
  pre: rate > -1
  post: 
    result = Integer.subrange(1,values->size())->collect( _ind | FinanceLib.discountDiscrete(values->at(_ind), rate, (_ind - 1) ) )->sum(); 

  static query irrDiscrete(values: Sequence(double)) : double
  pre: true post: true; 

  static query straddleDates(d1 : OclDate, d2 : OclDate, period : int) : Sequence(OclDate)
  pre: true 
  post: true 
  activity: 
    var cd : OclDate := d1; 
    while cd.compareToYMD(d2) <= 0
    do 
      (cd := cd.addMonthYMD(period)); 
    return Sequence{cd.subtractMonthYMD(period),cd}; 

  static query numberOfPeriods(settle : OclDate, matur : OclDate, period : int) : int 
  pre: true 
  post: true
  activity: 
    var monthsToMaturity : double := OclDate.differenceMonths(matur,settle)*1.0;       
    return (monthsToMaturity/period)->ceil(); 

  static query sequenceOfPeriods(sett : OclDate, mat : OclDate, period : int) : Sequence(int) 
  pre: period > 0
  post: true
  activity: 
    var numPeriods :int := FinanceLib.numberOfPeriods(sett, mat, period); 
    return Integer.subrange(1, numPeriods); 

static query couponDates(matur : OclDate, period : int, numPeriods : int) : Sequence(OclDate)
pre: period > 0
post: true
activity:  
  var cpdates : Sequence(OclDate) := Sequence{matur}; 
  var cpdate : OclDate := matur; 

  for i : Integer.subrange(0, numPeriods - 2) 
  do ( 
    var mo : int := cpdate.getMonth() - period;    
    var prevMonth : int := mo; 
    var prevYear : int := cpdate.getYear(); 
    var prevDay : int := cpdate.getDate(); 
      
    if mo <= 0 
    then
      prevMonth := 12 + mo ;  
      prevYear := cpdate.year - 1
    else skip;     
    cpdate := OclDate.newOclDate_YMD(prevYear,prevMonth,prevDay);
    cpdates := cpdates->append(cpdate)
  ) ; 

  cpdates := cpdates->reverse() ;  
  return cpdates;

  static query days360(d1 : OclDate, d2 : OclDate, num : String, mat : OclDate) : int
  pre: true 
  post: true
  activity:            
    var dd1 : int := d1.getDate();
    var dd2 : int := d2.getDate();
    var mm1 : int := d1.getMonth();
    var mm2 : int := d2.getMonth();
    var yy1 : int := d1.getYear();
    var yy2 : int := d2.getYear();

    if num = "30/360"
    then
      return 360*(yy2 - yy1) + 30*(mm2 - mm1) + (dd2 - dd1)
    else skip; 
 
    if num = "30/360B"
    then
      dd1 := Set{dd1, 30}->min();
      if dd1 > 29 then
        dd2 := Set{dd2, 30}->min() 
      else skip; 
      return 360*(yy2 - yy1) + 30*(mm2 - mm1) + (dd2 - dd1)
    else skip; 

    if num = "30/360US"
    then
      if mm1 = 2 & (dd1 = 28 or dd1 = 29) & mm2 = 2 & (dd2 = 28 or dd2 = 29)
      then dd2 := 30 else skip;
      if mm1 = 2 & (dd1 = 28 or dd1 = 29)
      then dd1 := 30 else skip;
      if dd2 = 31 & (dd1 = 30 or dd1 = 31)
      then dd2 := 30 else skip; 
      if dd1 = 31 then dd1 := 30 else skip; 
      return 360*(yy2 - yy1) + 30*(mm2 - mm1) + (dd2 - dd1)
    else skip;  
          
    if num = "30E/360"
    then 
      if dd1 = 31 then dd1 := 30 else skip; 
      if dd2 = 31 then dd2 := 30 else skip; 
      return 360*(yy2 - yy1) + 30*(mm2 - mm1) + (dd2 - dd1)
    else skip;  
            
    if num = "30E/360ISDA"
    then    
      if d1.isEndOfMonth() then dd1 := 30 else skip; 
      if not(d2 = mat & mm2 = 2) & d2.isEndOfMonth()  
      then dd2 := 30 else skip; 
      return 360*(yy2 - yy1) + 30*(mm2 - mm1) + (dd2 - dd1)        
    else
      return 360*(yy2 - yy1) + 30*(mm2 - mm1) + (dd2 - dd1); 


  static query numberOfMonths(pd : OclDate, settle : OclDate, cd : double, dayCount : String, matur : OclDate) : Sequence(double)
  pre: true 
  post: true
  activity: 
    var sv : double := 0.0;
    
    if (dayCount = "Actual/360" or dayCount = "Actual/365F" or
        dayCount = "Actual/ActualICMA" or
        dayCount = "Actual/364" or 
        dayCount = "Actual/ActualISDA")
    then
      var daysBetween : int := OclDate.daysBetweenDates(pd, settle);
      sv := (cd - daysBetween)/cd;
      return Sequence{sv, cd - daysBetween}     
    else
      (var daysBetween360 : int := FinanceLib.days360(pd, settle, dayCount, matur);
       sv := (cd - daysBetween360)/cd;
       return Sequence{sv, cd - daysBetween360});

  static query calculateCouponPayments(paymentDates : Sequence(OclDate), annualCouponRate : double, dayCountC : String, freq : int) : Sequence(Sequence(double))
  pre: freq > 0
  post: true
  activity: 
    var coupon_payments : Sequence(double) := Sequence{};
    var dates_payments : Sequence(double) := Sequence{};
    var cum_days : double := 0.0;
    var days : double := 0.0;

    for i : Integer.subrange(1, paymentDates->size()-1)
    do
      (var startDate : OclDate := paymentDates->at(i);
       var endDate : OclDate := paymentDates->at(i+1);

       if (dayCountC = "30/360" or 
           dayCountC = "30/360B" or 
           dayCountC = "30/360US" or
           dayCountC = "30E/360" or
           dayCountC = "30E/360ISDA" or 
           dayCountC = "Actual/360")
       then
         days := FinanceLib.days360(startDate, endDate,
                     dayCountC, paymentDates->last())
       else 
         if dayCountC = "Actual/365F"
         then days := 365.0/freq
         else 
           if dayCountC = "Actual/364"
           then days := 364.0/freq
           else  
             days := OclDate.daysBetweenDates(startDate, endDate);

       var coupon_payment : double := annualCouponRate/freq;

       coupon_payments := coupon_payments->append(coupon_payment);
       cum_days := cum_days + days;
       dates_payments := dates_payments->append(cum_days)
     );
     return Sequence{coupon_payments, dates_payments}; 

  static query bondCashFlows(settle : OclDate, matur : OclDate, coupon : double, dayCount : String, freq : int) : Sequence(OclAny)
   pre: freq > 0
   post: true
   activity: 
     var period : int := (12 / freq)->oclAsType(int);
     var np : int := FinanceLib.numberOfPeriods(settle, matur, period);
     var snp : Sequence(int) := FinanceLib.sequenceOfPeriods(settle, matur, period);
     var cd : Sequence(OclDate) := FinanceLib.couponDates(matur, period, np);

     var pm : OclDate := (cd[1]).subtractMonthYMD(period);
     var cdn : Sequence(OclDate) := Sequence{pm}->union(cd);
     var coupPayments : Sequence(Sequence(double)) := 
         FinanceLib.calculateCouponPayments(
                    cdn, coupon, dayCount, freq);
     var cumd : Sequence(double) := coupPayments->at(2);
     var cp : Sequence(double) := coupPayments->at(1);
     var nm : Sequence(double) := 
       FinanceLib.numberOfMonths(pm, settle,
                                 cumd->at(1), dayCount, matur); 


     if settle.compareToYMD(pm) = 0 
     then
       return Sequence{cp, cd, snp, cumd}  
     else 
       (var newsnp : Sequence(double) := 
          snp->collect( x | x - (snp->at(1) - nm->at(1)));
        var newcumd : Sequence(double) :=
          cumd->collect( x | x - (cumd->at(1) - nm->at(2))); 
        return Sequence{cp, cd, newsnp, newcumd});


  static query bondPrice(yld : double, settle : OclDate, matur : OclDate, coup : double, dayCount : String, freq : int) : double
  pre: freq > 0
  post: true
  activity: 
    var bcfs : Sequence(OclAny) := 
      FinanceLib.bondCashFlows(settle,matur,
                               coup,dayCount,freq); 
    var coupRates : Sequence(double) := bcfs->at(1)->oclAsType(Sequence(double)); 
    var timePoints : Sequence(double) := bcfs->at(3)->oclAsType(Sequence(double));
    var discountFactors : Sequence(double) := timePoints->collect(x | (1.0/(1 + (yld/freq)))->pow(x)); 
    coupRates := coupRates->front()->append(coupRates->last() + 1); 
    var sp : double := 0.0; 
    for i : Integer.subrange(1,coupRates->size()) 
    do 
      sp := sp + (discountFactors->at(i) * coupRates->at(i)); 
    return sp; 

 static query accInterest(issue : OclDate, settle : OclDate, freq : int, coup : double) : double
 pre: freq > 0
 post: true
 activity: 
   var period : int := (12/freq)->oclAsType(int); 
   var st : Sequence(OclDate) := FinanceLib.straddleDates(issue,settle,period); 
   var aif : double := (1.0*OclDate.daysBetweenDates(st->at(1), settle))/OclDate.daysBetweenDates(st->at(1),st->at(2)); 
   return aif*(coup/freq); 

static query accumulatedInterest(issue : OclDate, settle : OclDate, freq : int, coup : double, dayCount : String, matur : OclDate) : double
  pre: freq > 0
  post: true
  activity:           
    var period : int := (12 / freq)->oclAsType(int);

    var st : Sequence(OclDate) := FinanceLib.straddleDates(issue, settle, period);
    var d1 : OclDate := st->at(1);
    var d2 : OclDate := st->at(2);
    var ys : int := d1.getYear();
    var ye : int := settle.getYear();
    var ysEnd : OclDate := OclDate.newOclDate_YMD(ys, 12, 31);
    var yeStart : OclDate := OclDate.newOclDate_YMD(ye, 1, 1);

    if dayCount = "Actual/365F"
    then
      return coup*(OclDate.daysBetweenDates(d1, settle)/365.0)
    else skip; 
 
    if dayCount = "Actual/ActualISDA"
    then
      if d1.isLeapYear() & settle.isLeapYear()
      then 
        return coup*(OclDate.daysBetweenDates(d1, settle)/366.0)
      else 
        if (not(d1.isLeapYear()) & not(settle.isLeapYear()))
        then
          return coup*(OclDate.daysBetweenDates(d1, settle)/365.0)
        else 
          if (d1.isLeapYear() & not(settle.isLeapYear()))
          then
            return coup*(OclDate.daysBetweenDates(d1, ysEnd)/366.0) +
              coup*(OclDate.daysBetweenDates(yeStart, settle)/365.0)
          else
            return coup*(OclDate.daysBetweenDates(d1, ysEnd)/365.0) +
              coup*(OclDate.daysBetweenDates(yeStart, settle)/366.0) 
    else skip;  
              
    if dayCount = "Actual/364"
    then 
      return coup*(OclDate.daysBetweenDates(d1, settle)/364.0)
    else skip; 
 
    if dayCount = "Actual/360"
    then 
      return coup*(OclDate.daysBetweenDates(d1, settle)/360.0)
    else skip;  
                  
    if dayCount = "Actual/ActualICMA"
    then 
      return coup*(1.0*OclDate.daysBetweenDates(d1, settle))/(freq*OclDate.daysBetweenDates(d1, d2))
    else
      return coup*(FinanceLib.days360(d1, settle, dayCount, matur)/360.0);
            
  static query bondPriceClean(Y : double, I : OclDate, S : OclDate, M : OclDate, c : double, dcf : String, f : int) : double
  pre: freq > 0
  post: result = FinanceLib.bondPrice(Y,S,M,c,dcf,f) -FinanceLib.accumulatedInterest(I,S,f,c,dcf,M); 

  }

}
